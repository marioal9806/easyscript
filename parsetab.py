
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS CLOSEPAR COMMA DIM DIVIDE DO ELSE END EQUALS FLOAT FLOAT_TYPE FOR GOSUB GOTO GREATERTHAN IDENTIFIER IF INPUT INT INT_TYPE ISEQUALTO LABEL LABEL_SALTO LESSTHAN LET LOOP MINUS MULTIPLY NEXT OPENPAR OR PLUS PRINT PROGRAM RETURN SIZE SIZE_ID STRING STRING_TYPE THEN TO WHILE\n    programa : PROGRAM var procedure block END\n    \n    var : DIM repeated_identifier AS type repeated_size var\n        | DIM repeated_identifier AS STRING_TYPE var\n        | empty\n    \n    repeated_size : SIZE repeated_size\n                    | SIZE_ID repeated_size\n                    | empty\n    \n    repeated_identifier : IDENTIFIER COMMA repeated_identifier\n                        | IDENTIFIER\n    \n    type : INT_TYPE\n            | FLOAT_TYPE\n    \n    block : statement block\n            | empty\n    \n    statement : INPUT repeated_print\n        | PRINT repeated_print\n        | FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER\n        | DO block LOOP WHILE expression\n        | GOSUB LABEL\n        | GOTO LABEL\n        | LABEL_SALTO\n    \n    statement : WHILE aux_while DO block LOOP fin_while\n    \n    aux_while : expression\n    \n    fin_while : empty\n    \n    statement : IF aux_if THEN block ELSE aux_else block END IF aux_fin\n    \n    aux_if : expression\n    \n    aux_else : empty\n    \n    aux_fin : empty\n    \n    statement : LET IDENTIFIER repeated_size EQUALS expression\n    \n    procedure : LABEL block RETURN procedure\n                | empty\n    \n    repeated_print : repeated_elem COMMA repeated_print\n                    | repeated_elem\n    \n    repeated_elem : STRING\n                    | elem\n    \n    expression : expression_s op_rel expression_s\n                | expression_s\n    \n    expression_s : term \n                | term PLUS expression_s\n                | term MINUS expression_s\n                | term OR expression_s\n    \n    term : factor\n        | factor MULTIPLY term\n        | factor DIVIDE term\n        | factor AND term\n    \n    factor : elem\n            | OPENPAR expression CLOSEPAR\n    \n    elem : INT\n        | IDENTIFIER repeated_size\n        | elem_else\n    \n    elem_else : FLOAT\n    \n    op_rel : LESSTHAN\n            | GREATERTHAN\n            | ISEQUALTO\n    \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,27,],[0,-1,]),'DIM':([2,53,54,55,56,60,61,62,80,83,84,],[4,-54,4,-10,-11,-54,-54,-7,4,-5,-6,]),'LABEL':([2,3,5,19,20,52,53,54,55,56,60,61,62,80,81,83,84,98,],[-54,7,-4,47,48,7,-54,-54,-10,-11,-54,-54,-7,-54,-3,-5,-6,-2,]),'INPUT':([2,3,5,6,7,8,12,17,21,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,52,53,54,55,56,59,60,61,62,65,77,79,80,81,82,83,84,88,89,90,91,92,93,94,95,98,100,101,102,103,104,105,106,107,108,113,114,115,116,],[-54,-54,-4,14,14,-30,14,14,-20,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-54,-54,-54,-10,-11,-48,-54,-54,-7,14,14,-29,-54,-3,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-2,-17,-54,-54,-28,14,-21,-23,14,-26,-16,-54,-24,-27,]),'PRINT':([2,3,5,6,7,8,12,17,21,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,52,53,54,55,56,59,60,61,62,65,77,79,80,81,82,83,84,88,89,90,91,92,93,94,95,98,100,101,102,103,104,105,106,107,108,113,114,115,116,],[-54,-54,-4,15,15,-30,15,15,-20,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-54,-54,-54,-10,-11,-48,-54,-54,-7,15,15,-29,-54,-3,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-2,-17,-54,-54,-28,15,-21,-23,15,-26,-16,-54,-24,-27,]),'FOR':([2,3,5,6,7,8,12,17,21,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,52,53,54,55,56,59,60,61,62,65,77,79,80,81,82,83,84,88,89,90,91,92,93,94,95,98,100,101,102,103,104,105,106,107,108,113,114,115,116,],[-54,-54,-4,16,16,-30,16,16,-20,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-54,-54,-54,-10,-11,-48,-54,-54,-7,16,16,-29,-54,-3,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-2,-17,-54,-54,-28,16,-21,-23,16,-26,-16,-54,-24,-27,]),'DO':([2,3,5,6,7,8,12,17,21,29,30,31,32,33,34,35,36,37,40,41,42,43,44,45,47,48,52,53,54,55,56,59,60,61,62,65,77,79,80,81,82,83,84,88,89,90,91,92,93,94,95,98,100,101,102,103,104,105,106,107,108,113,114,115,116,],[-54,-54,-4,17,17,-30,17,17,-20,-14,-32,-33,-34,-47,-54,-49,-50,-15,65,-22,-36,-37,-41,-45,-18,-19,-54,-54,-54,-10,-11,-48,-54,-54,-7,17,17,-29,-54,-3,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-2,-17,-54,-54,-28,17,-21,-23,17,-26,-16,-54,-24,-27,]),'GOSUB':([2,3,5,6,7,8,12,17,21,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,52,53,54,55,56,59,60,61,62,65,77,79,80,81,82,83,84,88,89,90,91,92,93,94,95,98,100,101,102,103,104,105,106,107,108,113,114,115,116,],[-54,-54,-4,19,19,-30,19,19,-20,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-54,-54,-54,-10,-11,-48,-54,-54,-7,19,19,-29,-54,-3,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-2,-17,-54,-54,-28,19,-21,-23,19,-26,-16,-54,-24,-27,]),'GOTO':([2,3,5,6,7,8,12,17,21,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,52,53,54,55,56,59,60,61,62,65,77,79,80,81,82,83,84,88,89,90,91,92,93,94,95,98,100,101,102,103,104,105,106,107,108,113,114,115,116,],[-54,-54,-4,20,20,-30,20,20,-20,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-54,-54,-54,-10,-11,-48,-54,-54,-7,20,20,-29,-54,-3,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-2,-17,-54,-54,-28,20,-21,-23,20,-26,-16,-54,-24,-27,]),'LABEL_SALTO':([2,3,5,6,7,8,12,17,21,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,52,53,54,55,56,59,60,61,62,65,77,79,80,81,82,83,84,88,89,90,91,92,93,94,95,98,100,101,102,103,104,105,106,107,108,113,114,115,116,],[-54,-54,-4,21,21,-30,21,21,-20,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-54,-54,-54,-10,-11,-48,-54,-54,-7,21,21,-29,-54,-3,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-2,-17,-54,-54,-28,21,-21,-23,21,-26,-16,-54,-24,-27,]),'WHILE':([2,3,5,6,7,8,12,17,21,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,52,53,54,55,56,59,60,61,62,64,65,77,79,80,81,82,83,84,88,89,90,91,92,93,94,95,98,100,101,102,103,104,105,106,107,108,113,114,115,116,],[-54,-54,-4,18,18,-30,18,18,-20,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-54,-54,-54,-10,-11,-48,-54,-54,-7,86,18,18,-29,-54,-3,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-2,-17,-54,-54,-28,18,-21,-23,18,-26,-16,-54,-24,-27,]),'IF':([2,3,5,6,7,8,12,17,21,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,52,53,54,55,56,59,60,61,62,65,77,79,80,81,82,83,84,88,89,90,91,92,93,94,95,98,100,101,102,103,104,105,106,107,108,112,113,114,115,116,],[-54,-54,-4,22,22,-30,22,22,-20,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-54,-54,-54,-10,-11,-48,-54,-54,-7,22,22,-29,-54,-3,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-2,-17,-54,-54,-28,22,-21,-23,22,-26,114,-16,-54,-24,-27,]),'LET':([2,3,5,6,7,8,12,17,21,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,52,53,54,55,56,59,60,61,62,65,77,79,80,81,82,83,84,88,89,90,91,92,93,94,95,98,100,101,102,103,104,105,106,107,108,113,114,115,116,],[-54,-54,-4,23,23,-30,23,23,-20,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-54,-54,-54,-10,-11,-48,-54,-54,-7,23,23,-29,-54,-3,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-2,-17,-54,-54,-28,23,-21,-23,23,-26,-16,-54,-24,-27,]),'END':([2,3,5,6,8,11,12,13,21,28,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,52,53,54,55,56,59,60,61,62,79,80,81,82,83,84,88,89,90,91,92,93,94,95,98,100,101,102,103,105,106,107,108,110,113,114,115,116,],[-54,-54,-4,-54,-30,27,-54,-13,-20,-12,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-54,-54,-54,-10,-11,-48,-54,-54,-7,-29,-54,-3,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-2,-17,-54,-54,-28,-21,-23,-54,-26,112,-16,-54,-24,-27,]),'IDENTIFIER':([4,14,15,16,18,22,23,26,46,58,66,67,68,69,70,71,72,73,74,75,86,97,111,],[10,34,34,38,34,34,51,10,34,34,34,-51,-52,-53,34,34,34,34,34,34,34,34,113,]),'RETURN':([7,12,13,21,24,28,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,59,60,61,62,82,83,84,88,89,90,91,92,93,94,95,100,101,103,105,106,113,114,115,116,],[-54,-54,-13,-20,52,-12,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-48,-54,-54,-7,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-17,-54,-28,-21,-23,-16,-54,-24,-27,]),'AS':([9,10,57,],[25,-9,-8,]),'COMMA':([10,30,31,32,33,34,35,36,59,60,61,62,83,84,],[26,58,-33,-34,-47,-54,-49,-50,-48,-54,-54,-7,-5,-6,]),'LOOP':([12,13,17,21,28,29,30,31,32,33,34,35,36,37,39,42,43,44,45,47,48,59,60,61,62,65,82,83,84,87,88,89,90,91,92,93,94,95,100,101,103,105,106,113,114,115,116,],[-54,-13,-54,-20,-12,-14,-32,-33,-34,-47,-54,-49,-50,-15,64,-36,-37,-41,-45,-18,-19,-48,-54,-54,-7,-54,-31,-5,-6,101,-35,-38,-39,-40,-42,-43,-44,-46,-17,-54,-28,-21,-23,-16,-54,-24,-27,]),'ELSE':([12,13,21,28,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,59,60,61,62,77,82,83,84,88,89,90,91,92,93,94,95,96,100,101,103,105,106,113,114,115,116,],[-54,-13,-20,-12,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-48,-54,-54,-7,-54,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,102,-17,-54,-28,-21,-23,-16,-54,-24,-27,]),'NEXT':([12,13,21,28,29,30,31,32,33,34,35,36,37,42,43,44,45,47,48,59,60,61,62,82,83,84,88,89,90,91,92,93,94,95,100,101,103,104,105,106,109,113,114,115,116,],[-54,-13,-20,-12,-14,-32,-33,-34,-47,-54,-49,-50,-15,-36,-37,-41,-45,-18,-19,-48,-54,-54,-7,-31,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,-17,-54,-28,-54,-21,-23,111,-16,-54,-24,-27,]),'STRING':([14,15,58,],[31,31,31,]),'INT':([14,15,18,22,46,58,63,66,67,68,69,70,71,72,73,74,75,86,97,99,],[33,33,33,33,33,33,85,33,-51,-52,-53,33,33,33,33,33,33,33,33,104,]),'FLOAT':([14,15,18,22,46,58,66,67,68,69,70,71,72,73,74,75,86,97,],[36,36,36,36,36,36,36,-51,-52,-53,36,36,36,36,36,36,36,36,]),'OPENPAR':([18,22,46,66,67,68,69,70,71,72,73,74,75,86,97,],[46,46,46,46,-51,-52,-53,46,46,46,46,46,46,46,46,]),'STRING_TYPE':([25,],[54,]),'INT_TYPE':([25,],[55,]),'FLOAT_TYPE':([25,],[56,]),'MULTIPLY':([33,34,35,36,44,45,59,60,61,62,83,84,95,],[-47,-54,-49,-50,73,-45,-48,-54,-54,-7,-5,-6,-46,]),'DIVIDE':([33,34,35,36,44,45,59,60,61,62,83,84,95,],[-47,-54,-49,-50,74,-45,-48,-54,-54,-7,-5,-6,-46,]),'AND':([33,34,35,36,44,45,59,60,61,62,83,84,95,],[-47,-54,-49,-50,75,-45,-48,-54,-54,-7,-5,-6,-46,]),'PLUS':([33,34,35,36,43,44,45,59,60,61,62,83,84,92,93,94,95,],[-47,-54,-49,-50,70,-41,-45,-48,-54,-54,-7,-5,-6,-42,-43,-44,-46,]),'MINUS':([33,34,35,36,43,44,45,59,60,61,62,83,84,92,93,94,95,],[-47,-54,-49,-50,71,-41,-45,-48,-54,-54,-7,-5,-6,-42,-43,-44,-46,]),'OR':([33,34,35,36,43,44,45,59,60,61,62,83,84,92,93,94,95,],[-47,-54,-49,-50,72,-41,-45,-48,-54,-54,-7,-5,-6,-42,-43,-44,-46,]),'LESSTHAN':([33,34,35,36,42,43,44,45,59,60,61,62,83,84,89,90,91,92,93,94,95,],[-47,-54,-49,-50,67,-37,-41,-45,-48,-54,-54,-7,-5,-6,-38,-39,-40,-42,-43,-44,-46,]),'GREATERTHAN':([33,34,35,36,42,43,44,45,59,60,61,62,83,84,89,90,91,92,93,94,95,],[-47,-54,-49,-50,68,-37,-41,-45,-48,-54,-54,-7,-5,-6,-38,-39,-40,-42,-43,-44,-46,]),'ISEQUALTO':([33,34,35,36,42,43,44,45,59,60,61,62,83,84,89,90,91,92,93,94,95,],[-47,-54,-49,-50,69,-37,-41,-45,-48,-54,-54,-7,-5,-6,-38,-39,-40,-42,-43,-44,-46,]),'THEN':([33,34,35,36,42,43,44,45,49,50,59,60,61,62,83,84,88,89,90,91,92,93,94,95,],[-47,-54,-49,-50,-36,-37,-41,-45,77,-25,-48,-54,-54,-7,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,]),'CLOSEPAR':([33,34,35,36,42,43,44,45,59,60,61,62,76,83,84,88,89,90,91,92,93,94,95,],[-47,-54,-49,-50,-36,-37,-41,-45,-48,-54,-54,-7,95,-5,-6,-35,-38,-39,-40,-42,-43,-44,-46,]),'SIZE':([34,51,53,55,56,60,61,],[60,60,60,-10,-11,60,60,]),'SIZE_ID':([34,51,53,55,56,60,61,],[61,61,61,-10,-11,61,61,]),'EQUALS':([38,51,60,61,62,78,83,84,],[63,-54,-54,-54,-7,97,-5,-6,]),'TO':([85,],[99,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'var':([2,54,80,],[3,81,98,]),'empty':([2,3,6,7,12,17,34,51,52,53,54,60,61,65,77,80,101,102,104,107,114,],[5,8,13,13,13,13,62,62,8,62,5,62,62,13,13,5,106,108,13,13,116,]),'procedure':([3,52,],[6,79,]),'repeated_identifier':([4,26,],[9,57,]),'block':([6,7,12,17,65,77,104,107,],[11,24,28,39,87,96,109,110,]),'statement':([6,7,12,17,65,77,104,107,],[12,12,12,12,12,12,12,12,]),'repeated_print':([14,15,58,],[29,37,82,]),'repeated_elem':([14,15,58,],[30,30,30,]),'elem':([14,15,18,22,46,58,66,70,71,72,73,74,75,86,97,],[32,32,45,45,45,32,45,45,45,45,45,45,45,45,45,]),'elem_else':([14,15,18,22,46,58,66,70,71,72,73,74,75,86,97,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'aux_while':([18,],[40,]),'expression':([18,22,46,86,97,],[41,50,76,100,103,]),'expression_s':([18,22,46,66,70,71,72,86,97,],[42,42,42,88,89,90,91,42,42,]),'term':([18,22,46,66,70,71,72,73,74,75,86,97,],[43,43,43,43,43,43,43,92,93,94,43,43,]),'factor':([18,22,46,66,70,71,72,73,74,75,86,97,],[44,44,44,44,44,44,44,44,44,44,44,44,]),'aux_if':([22,],[49,]),'type':([25,],[53,]),'repeated_size':([34,51,53,60,61,],[59,78,80,83,84,]),'op_rel':([42,],[66,]),'fin_while':([101,],[105,]),'aux_else':([102,],[107,]),'aux_fin':([114,],[115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM var procedure block END','programa',5,'p_programa','parserules.py',29),
  ('var -> DIM repeated_identifier AS type repeated_size var','var',6,'p_var','parserules.py',35),
  ('var -> DIM repeated_identifier AS STRING_TYPE var','var',5,'p_var','parserules.py',36),
  ('var -> empty','var',1,'p_var','parserules.py',37),
  ('repeated_size -> SIZE repeated_size','repeated_size',2,'p_repeated_size','parserules.py',46),
  ('repeated_size -> SIZE_ID repeated_size','repeated_size',2,'p_repeated_size','parserules.py',47),
  ('repeated_size -> empty','repeated_size',1,'p_repeated_size','parserules.py',48),
  ('repeated_identifier -> IDENTIFIER COMMA repeated_identifier','repeated_identifier',3,'p_repeated_identifier','parserules.py',54),
  ('repeated_identifier -> IDENTIFIER','repeated_identifier',1,'p_repeated_identifier','parserules.py',55),
  ('type -> INT_TYPE','type',1,'p_var_type','parserules.py',71),
  ('type -> FLOAT_TYPE','type',1,'p_var_type','parserules.py',72),
  ('block -> statement block','block',2,'p_block','parserules.py',78),
  ('block -> empty','block',1,'p_block','parserules.py',79),
  ('statement -> INPUT repeated_print','statement',2,'p_statement','parserules.py',85),
  ('statement -> PRINT repeated_print','statement',2,'p_statement','parserules.py',86),
  ('statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER','statement',9,'p_statement','parserules.py',87),
  ('statement -> DO block LOOP WHILE expression','statement',5,'p_statement','parserules.py',88),
  ('statement -> GOSUB LABEL','statement',2,'p_statement','parserules.py',89),
  ('statement -> GOTO LABEL','statement',2,'p_statement','parserules.py',90),
  ('statement -> LABEL_SALTO','statement',1,'p_statement','parserules.py',91),
  ('statement -> WHILE aux_while DO block LOOP fin_while','statement',6,'p_statement_while','parserules.py',97),
  ('aux_while -> expression','aux_while',1,'p_aux_while','parserules.py',103),
  ('fin_while -> empty','fin_while',1,'p_aux_fin_while','parserules.py',117),
  ('statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin','statement',10,'p_statement_if','parserules.py',132),
  ('aux_if -> expression','aux_if',1,'p_aux_if','parserules.py',138),
  ('aux_else -> empty','aux_else',1,'p_aux_else','parserules.py',149),
  ('aux_fin -> empty','aux_fin',1,'p_aux_fin','parserules.py',165),
  ('statement -> LET IDENTIFIER repeated_size EQUALS expression','statement',5,'p_statement_assignment','parserules.py',173),
  ('procedure -> LABEL block RETURN procedure','procedure',4,'p_procedure','parserules.py',184),
  ('procedure -> empty','procedure',1,'p_procedure','parserules.py',185),
  ('repeated_print -> repeated_elem COMMA repeated_print','repeated_print',3,'p_repeated_print','parserules.py',191),
  ('repeated_print -> repeated_elem','repeated_print',1,'p_repeated_print','parserules.py',192),
  ('repeated_elem -> STRING','repeated_elem',1,'p_repeated_elem','parserules.py',198),
  ('repeated_elem -> elem','repeated_elem',1,'p_repeated_elem','parserules.py',199),
  ('expression -> expression_s op_rel expression_s','expression',3,'p_expression','parserules.py',205),
  ('expression -> expression_s','expression',1,'p_expression','parserules.py',206),
  ('expression_s -> term','expression_s',1,'p_expression_s','parserules.py',215),
  ('expression_s -> term PLUS expression_s','expression_s',3,'p_expression_s','parserules.py',216),
  ('expression_s -> term MINUS expression_s','expression_s',3,'p_expression_s','parserules.py',217),
  ('expression_s -> term OR expression_s','expression_s',3,'p_expression_s','parserules.py',218),
  ('term -> factor','term',1,'p_term','parserules.py',227),
  ('term -> factor MULTIPLY term','term',3,'p_term','parserules.py',228),
  ('term -> factor DIVIDE term','term',3,'p_term','parserules.py',229),
  ('term -> factor AND term','term',3,'p_term','parserules.py',230),
  ('factor -> elem','factor',1,'p_factor','parserules.py',239),
  ('factor -> OPENPAR expression CLOSEPAR','factor',3,'p_factor','parserules.py',240),
  ('elem -> INT','elem',1,'p_elem_float','parserules.py',249),
  ('elem -> IDENTIFIER repeated_size','elem',2,'p_elem_float','parserules.py',250),
  ('elem -> elem_else','elem',1,'p_elem_float','parserules.py',251),
  ('elem_else -> FLOAT','elem_else',1,'p_elem','parserules.py',260),
  ('op_rel -> LESSTHAN','op_rel',1,'p_op_rel','parserules.py',266),
  ('op_rel -> GREATERTHAN','op_rel',1,'p_op_rel','parserules.py',267),
  ('op_rel -> ISEQUALTO','op_rel',1,'p_op_rel','parserules.py',268),
  ('empty -> <empty>','empty',0,'p_empty','parserules.py',278),
]
