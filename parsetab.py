
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS CALL CLOSEPAR COMMA DIM DIVIDE DO ELSE END EQUALS FLOAT FLOAT_TYPE FOR GOTO GREATERTHAN GREATERTHANOREQUAL IDENTIFIER IF INPUT INT INT_TYPE ISEQUALTO LABEL LABEL_SALTO LESSTHAN LESSTHANOREQUAL LET LOOP MINUS MULTIPLY NEXT OPENPAR OR PLUS PRINT PROGRAM RETURN SIZE SIZE_ID STRING STRING_TYPE THEN TO WHILE\n    programa : programa_aux var procedure block END\n    \n    programa_aux : PROGRAM\n    \n    var : DIM repeated_identifier AS type repeated_size var\n        | DIM repeated_identifier AS STRING_TYPE var\n        | empty\n    \n    repeated_size : SIZE repeated_size\n                    | SIZE_ID repeated_size\n                    | empty\n    \n    repeated_identifier : IDENTIFIER COMMA repeated_identifier\n                        | IDENTIFIER\n    \n    type : INT_TYPE\n            | FLOAT_TYPE\n    \n    block : statement block\n            | empty\n    \n    statement : GOTO LABEL\n        | LABEL_SALTO\n    \n    statement : FOR aux1 TO aux2 block NEXT aux3\n    \n    aux1 : IDENTIFIER EQUALS expression\n    \n    aux2 : expression\n    \n    aux3 : IDENTIFIER\n    \n    statement : DO do_while_inicio block LOOP WHILE aux_do_while\n    \n    do_while_inicio : empty\n    \n    aux_do_while : expression\n    \n    statement : WHILE aux_while DO block LOOP fin_while\n    \n    aux_while : expression\n    \n    fin_while : empty\n    \n    statement : IF aux_if THEN block ELSE aux_else block END IF aux_fin\n    \n    aux_if : expression\n    \n    aux_else : empty\n    \n    aux_fin : empty\n    \n    statement : LET IDENTIFIER repeated_size EQUALS expression\n    \n    statement : CALL LABEL\n    \n    procedure : aux_label block aux_return procedure\n                | empty\n    \n    aux_label : LABEL\n    \n    aux_return : RETURN\n    \n    statement : INPUT repeated_print\n    \n    statement : PRINT repeated_print\n    \n    repeated_print : repeated_elem COMMA repeated_print\n                    | repeated_elem\n    \n    repeated_elem : STRING\n                    | elem\n    \n    expression : expression_s op_rel expression_s\n                | expression_s\n    \n    expression_s : term \n                | term PLUS expression_s\n                | term MINUS expression_s\n                | term OR expression_s\n    \n    term : factor\n        | factor MULTIPLY term\n        | factor DIVIDE term\n        | factor AND term\n    \n    factor : elem\n            | OPENPAR expression CLOSEPAR\n    \n    elem : INT\n        | IDENTIFIER repeated_size\n        | elem_else\n    \n    elem_else : FLOAT\n    \n    op_rel : LESSTHANOREQUAL\n            | GREATERTHANOREQUAL\n            | ISEQUALTO\n            | GREATERTHAN\n            | LESSTHAN\n\n    \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,29,],[0,-1,]),'DIM':([2,3,58,59,60,61,81,82,83,88,103,104,],[5,-2,-64,5,-11,-12,-64,-64,-8,5,-6,-7,]),'LABEL':([2,3,4,6,16,23,56,57,58,59,60,61,81,82,83,88,89,103,104,108,],[-64,-2,10,-5,31,50,10,-36,-64,-64,-11,-12,-64,-64,-8,-64,-4,-6,-7,-3,]),'GOTO':([2,3,4,6,7,8,9,10,14,17,19,31,34,35,38,39,40,41,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,66,80,81,82,83,84,87,88,89,90,91,95,96,97,98,99,100,101,102,103,104,107,108,111,112,113,115,116,117,118,119,120,121,122,125,126,127,],[-64,-2,-64,-5,16,16,-34,-35,16,-16,-64,-15,16,-22,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-64,-36,-64,-64,-11,-12,16,-56,-64,-64,-8,16,-33,-64,-4,16,-19,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-3,-64,-64,-31,-21,-23,-24,-26,16,-29,-17,-20,-64,-27,-30,]),'LABEL_SALTO':([2,3,4,6,7,8,9,10,14,17,19,31,34,35,38,39,40,41,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,66,80,81,82,83,84,87,88,89,90,91,95,96,97,98,99,100,101,102,103,104,107,108,111,112,113,115,116,117,118,119,120,121,122,125,126,127,],[-64,-2,-64,-5,17,17,-34,-35,17,-16,-64,-15,17,-22,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-64,-36,-64,-64,-11,-12,17,-56,-64,-64,-8,17,-33,-64,-4,17,-19,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-3,-64,-64,-31,-21,-23,-24,-26,17,-29,-17,-20,-64,-27,-30,]),'FOR':([2,3,4,6,7,8,9,10,14,17,19,31,34,35,38,39,40,41,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,66,80,81,82,83,84,87,88,89,90,91,95,96,97,98,99,100,101,102,103,104,107,108,111,112,113,115,116,117,118,119,120,121,122,125,126,127,],[-64,-2,-64,-5,18,18,-34,-35,18,-16,-64,-15,18,-22,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-64,-36,-64,-64,-11,-12,18,-56,-64,-64,-8,18,-33,-64,-4,18,-19,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-3,-64,-64,-31,-21,-23,-24,-26,18,-29,-17,-20,-64,-27,-30,]),'DO':([2,3,4,6,7,8,9,10,14,17,19,31,34,35,36,37,38,39,40,41,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,66,80,81,82,83,84,87,88,89,90,91,95,96,97,98,99,100,101,102,103,104,107,108,111,112,113,115,116,117,118,119,120,121,122,125,126,127,],[-64,-2,-64,-5,19,19,-34,-35,19,-16,-64,-15,19,-22,66,-25,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-64,-36,-64,-64,-11,-12,19,-56,-64,-64,-8,19,-33,-64,-4,19,-19,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-3,-64,-64,-31,-21,-23,-24,-26,19,-29,-17,-20,-64,-27,-30,]),'WHILE':([2,3,4,6,7,8,9,10,14,17,19,31,34,35,38,39,40,41,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,66,80,81,82,83,84,87,88,89,90,91,93,95,96,97,98,99,100,101,102,103,104,107,108,111,112,113,115,116,117,118,119,120,121,122,125,126,127,],[-64,-2,-64,-5,20,20,-34,-35,20,-16,-64,-15,20,-22,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-64,-36,-64,-64,-11,-12,20,-56,-64,-64,-8,20,-33,-64,-4,20,-19,110,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-3,-64,-64,-31,-21,-23,-24,-26,20,-29,-17,-20,-64,-27,-30,]),'IF':([2,3,4,6,7,8,9,10,14,17,19,31,34,35,38,39,40,41,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,66,80,81,82,83,84,87,88,89,90,91,95,96,97,98,99,100,101,102,103,104,107,108,111,112,113,115,116,117,118,119,120,121,122,124,125,126,127,],[-64,-2,-64,-5,21,21,-34,-35,21,-16,-64,-15,21,-22,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-64,-36,-64,-64,-11,-12,21,-56,-64,-64,-8,21,-33,-64,-4,21,-19,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-3,-64,-64,-31,-21,-23,-24,-26,21,-29,-17,-20,125,-64,-27,-30,]),'LET':([2,3,4,6,7,8,9,10,14,17,19,31,34,35,38,39,40,41,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,66,80,81,82,83,84,87,88,89,90,91,95,96,97,98,99,100,101,102,103,104,107,108,111,112,113,115,116,117,118,119,120,121,122,125,126,127,],[-64,-2,-64,-5,22,22,-34,-35,22,-16,-64,-15,22,-22,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-64,-36,-64,-64,-11,-12,22,-56,-64,-64,-8,22,-33,-64,-4,22,-19,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-3,-64,-64,-31,-21,-23,-24,-26,22,-29,-17,-20,-64,-27,-30,]),'CALL':([2,3,4,6,7,8,9,10,14,17,19,31,34,35,38,39,40,41,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,66,80,81,82,83,84,87,88,89,90,91,95,96,97,98,99,100,101,102,103,104,107,108,111,112,113,115,116,117,118,119,120,121,122,125,126,127,],[-64,-2,-64,-5,23,23,-34,-35,23,-16,-64,-15,23,-22,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-64,-36,-64,-64,-11,-12,23,-56,-64,-64,-8,23,-33,-64,-4,23,-19,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-3,-64,-64,-31,-21,-23,-24,-26,23,-29,-17,-20,-64,-27,-30,]),'INPUT':([2,3,4,6,7,8,9,10,14,17,19,31,34,35,38,39,40,41,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,66,80,81,82,83,84,87,88,89,90,91,95,96,97,98,99,100,101,102,103,104,107,108,111,112,113,115,116,117,118,119,120,121,122,125,126,127,],[-64,-2,-64,-5,24,24,-34,-35,24,-16,-64,-15,24,-22,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-64,-36,-64,-64,-11,-12,24,-56,-64,-64,-8,24,-33,-64,-4,24,-19,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-3,-64,-64,-31,-21,-23,-24,-26,24,-29,-17,-20,-64,-27,-30,]),'PRINT':([2,3,4,6,7,8,9,10,14,17,19,31,34,35,38,39,40,41,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,66,80,81,82,83,84,87,88,89,90,91,95,96,97,98,99,100,101,102,103,104,107,108,111,112,113,115,116,117,118,119,120,121,122,125,126,127,],[-64,-2,-64,-5,25,25,-34,-35,25,-16,-64,-15,25,-22,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-64,-36,-64,-64,-11,-12,25,-56,-64,-64,-8,25,-33,-64,-4,25,-19,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-3,-64,-64,-31,-21,-23,-24,-26,25,-29,-17,-20,-64,-27,-30,]),'END':([2,3,4,6,7,9,13,14,15,17,30,31,38,39,40,41,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,80,81,82,83,87,88,89,95,96,97,98,99,100,101,102,103,104,107,108,111,112,113,115,116,117,118,119,120,121,122,123,125,126,127,],[-64,-2,-64,-5,-64,-34,29,-64,-14,-16,-13,-15,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-64,-36,-64,-64,-11,-12,-56,-64,-64,-8,-33,-64,-4,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-3,-64,-64,-31,-21,-23,-24,-26,-64,-29,-17,-20,124,-64,-27,-30,]),'IDENTIFIER':([5,18,20,21,22,24,25,28,42,63,64,67,68,69,70,71,72,73,74,75,76,77,78,86,106,110,114,],[12,33,44,44,49,44,44,12,44,44,44,44,-59,-60,-61,-62,-63,44,44,44,44,44,44,44,44,44,122,]),'RETURN':([8,10,14,15,17,26,30,31,38,39,40,41,43,44,45,46,50,51,52,53,54,55,80,81,82,83,95,96,97,98,99,100,101,102,103,104,107,111,113,115,116,117,118,121,122,125,126,127,],[-64,-35,-64,-14,-16,57,-13,-15,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-56,-64,-64,-8,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-64,-31,-21,-23,-24,-26,-17,-20,-64,-27,-30,]),'AS':([11,12,62,],[27,-10,-9,]),'COMMA':([12,43,44,45,46,52,53,54,80,81,82,83,103,104,],[28,-55,-64,-57,-58,86,-41,-42,-56,-64,-64,-8,-6,-7,]),'LOOP':([14,15,17,19,30,31,34,35,38,39,40,41,43,44,45,46,50,51,52,53,54,55,65,66,80,81,82,83,94,95,96,97,98,99,100,101,102,103,104,107,111,113,115,116,117,118,121,122,125,126,127,],[-64,-14,-16,-64,-13,-15,-64,-22,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,93,-64,-56,-64,-64,-8,111,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,-64,-31,-21,-23,-24,-26,-17,-20,-64,-27,-30,]),'ELSE':([14,15,17,30,31,38,39,40,41,43,44,45,46,50,51,52,53,54,55,80,81,82,83,84,95,96,97,98,99,100,101,102,103,104,105,107,111,113,115,116,117,118,121,122,125,126,127,],[-64,-14,-16,-13,-15,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-56,-64,-64,-8,-64,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,112,-39,-64,-31,-21,-23,-24,-26,-17,-20,-64,-27,-30,]),'NEXT':([14,15,17,30,31,38,39,40,41,43,44,45,46,50,51,52,53,54,55,80,81,82,83,90,91,95,96,97,98,99,100,101,102,103,104,107,109,111,113,115,116,117,118,121,122,125,126,127,],[-64,-14,-16,-13,-15,-44,-45,-49,-53,-55,-64,-57,-58,-32,-37,-40,-41,-42,-38,-56,-64,-64,-8,-64,-19,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,-39,114,-64,-31,-21,-23,-24,-26,-17,-20,-64,-27,-30,]),'OPENPAR':([20,21,42,63,64,67,68,69,70,71,72,73,74,75,76,77,78,106,110,],[42,42,42,42,42,42,-59,-60,-61,-62,-63,42,42,42,42,42,42,42,42,]),'INT':([20,21,24,25,42,63,64,67,68,69,70,71,72,73,74,75,76,77,78,86,106,110,],[43,43,43,43,43,43,43,43,-59,-60,-61,-62,-63,43,43,43,43,43,43,43,43,43,]),'FLOAT':([20,21,24,25,42,63,64,67,68,69,70,71,72,73,74,75,76,77,78,86,106,110,],[46,46,46,46,46,46,46,46,-59,-60,-61,-62,-63,46,46,46,46,46,46,46,46,46,]),'STRING':([24,25,86,],[53,53,53,]),'STRING_TYPE':([27,],[59,]),'INT_TYPE':([27,],[60,]),'FLOAT_TYPE':([27,],[61,]),'TO':([32,38,39,40,41,43,44,45,46,80,81,82,83,92,95,96,97,98,99,100,101,102,103,104,],[63,-44,-45,-49,-53,-55,-64,-57,-58,-56,-64,-64,-8,-18,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,]),'EQUALS':([33,49,81,82,83,85,103,104,],[64,-64,-64,-64,-8,106,-6,-7,]),'THEN':([38,39,40,41,43,44,45,46,47,48,80,81,82,83,95,96,97,98,99,100,101,102,103,104,],[-44,-45,-49,-53,-55,-64,-57,-58,84,-28,-56,-64,-64,-8,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,]),'CLOSEPAR':([38,39,40,41,43,44,45,46,79,80,81,82,83,95,96,97,98,99,100,101,102,103,104,],[-44,-45,-49,-53,-55,-64,-57,-58,102,-56,-64,-64,-8,-43,-46,-47,-48,-50,-51,-52,-54,-6,-7,]),'LESSTHANOREQUAL':([38,39,40,41,43,44,45,46,80,81,82,83,96,97,98,99,100,101,102,103,104,],[68,-45,-49,-53,-55,-64,-57,-58,-56,-64,-64,-8,-46,-47,-48,-50,-51,-52,-54,-6,-7,]),'GREATERTHANOREQUAL':([38,39,40,41,43,44,45,46,80,81,82,83,96,97,98,99,100,101,102,103,104,],[69,-45,-49,-53,-55,-64,-57,-58,-56,-64,-64,-8,-46,-47,-48,-50,-51,-52,-54,-6,-7,]),'ISEQUALTO':([38,39,40,41,43,44,45,46,80,81,82,83,96,97,98,99,100,101,102,103,104,],[70,-45,-49,-53,-55,-64,-57,-58,-56,-64,-64,-8,-46,-47,-48,-50,-51,-52,-54,-6,-7,]),'GREATERTHAN':([38,39,40,41,43,44,45,46,80,81,82,83,96,97,98,99,100,101,102,103,104,],[71,-45,-49,-53,-55,-64,-57,-58,-56,-64,-64,-8,-46,-47,-48,-50,-51,-52,-54,-6,-7,]),'LESSTHAN':([38,39,40,41,43,44,45,46,80,81,82,83,96,97,98,99,100,101,102,103,104,],[72,-45,-49,-53,-55,-64,-57,-58,-56,-64,-64,-8,-46,-47,-48,-50,-51,-52,-54,-6,-7,]),'PLUS':([39,40,41,43,44,45,46,80,81,82,83,99,100,101,102,103,104,],[73,-49,-53,-55,-64,-57,-58,-56,-64,-64,-8,-50,-51,-52,-54,-6,-7,]),'MINUS':([39,40,41,43,44,45,46,80,81,82,83,99,100,101,102,103,104,],[74,-49,-53,-55,-64,-57,-58,-56,-64,-64,-8,-50,-51,-52,-54,-6,-7,]),'OR':([39,40,41,43,44,45,46,80,81,82,83,99,100,101,102,103,104,],[75,-49,-53,-55,-64,-57,-58,-56,-64,-64,-8,-50,-51,-52,-54,-6,-7,]),'MULTIPLY':([40,41,43,44,45,46,80,81,82,83,102,103,104,],[76,-53,-55,-64,-57,-58,-56,-64,-64,-8,-54,-6,-7,]),'DIVIDE':([40,41,43,44,45,46,80,81,82,83,102,103,104,],[77,-53,-55,-64,-57,-58,-56,-64,-64,-8,-54,-6,-7,]),'AND':([40,41,43,44,45,46,80,81,82,83,102,103,104,],[78,-53,-55,-64,-57,-58,-56,-64,-64,-8,-54,-6,-7,]),'SIZE':([44,49,58,60,61,81,82,],[81,81,81,-11,-12,81,81,]),'SIZE_ID':([44,49,58,60,61,81,82,],[82,82,82,-11,-12,82,82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'programa_aux':([0,],[2,]),'var':([2,59,88,],[4,89,108,]),'empty':([2,4,7,8,14,19,34,44,49,56,58,59,66,81,82,84,88,90,111,112,119,125,],[6,9,15,15,15,35,15,83,83,9,83,6,15,83,83,15,6,15,118,120,15,127,]),'procedure':([4,56,],[7,87,]),'aux_label':([4,56,],[8,8,]),'repeated_identifier':([5,28,],[11,62,]),'block':([7,8,14,34,66,84,90,119,],[13,26,30,65,94,105,109,123,]),'statement':([7,8,14,34,66,84,90,119,],[14,14,14,14,14,14,14,14,]),'aux1':([18,],[32,]),'do_while_inicio':([19,],[34,]),'aux_while':([20,],[36,]),'expression':([20,21,42,63,64,106,110,],[37,48,79,91,92,113,116,]),'expression_s':([20,21,42,63,64,67,73,74,75,106,110,],[38,38,38,38,38,95,96,97,98,38,38,]),'term':([20,21,42,63,64,67,73,74,75,76,77,78,106,110,],[39,39,39,39,39,39,39,39,39,99,100,101,39,39,]),'factor':([20,21,42,63,64,67,73,74,75,76,77,78,106,110,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'elem':([20,21,24,25,42,63,64,67,73,74,75,76,77,78,86,106,110,],[41,41,54,54,41,41,41,41,41,41,41,41,41,41,54,41,41,]),'elem_else':([20,21,24,25,42,63,64,67,73,74,75,76,77,78,86,106,110,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'aux_if':([21,],[47,]),'repeated_print':([24,25,86,],[51,55,107,]),'repeated_elem':([24,25,86,],[52,52,52,]),'aux_return':([26,],[56,]),'type':([27,],[58,]),'op_rel':([38,],[67,]),'repeated_size':([44,49,58,81,82,],[80,85,88,103,104,]),'aux2':([63,],[90,]),'aux_do_while':([110,],[115,]),'fin_while':([111,],[117,]),'aux_else':([112,],[119,]),'aux3':([114,],[121,]),'aux_fin':([125,],[126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> programa_aux var procedure block END','programa',5,'p_programa','parserules.py',44),
  ('programa_aux -> PROGRAM','programa_aux',1,'p_programa_aux','parserules.py',50),
  ('var -> DIM repeated_identifier AS type repeated_size var','var',6,'p_var','parserules.py',60),
  ('var -> DIM repeated_identifier AS STRING_TYPE var','var',5,'p_var','parserules.py',61),
  ('var -> empty','var',1,'p_var','parserules.py',62),
  ('repeated_size -> SIZE repeated_size','repeated_size',2,'p_repeated_size','parserules.py',71),
  ('repeated_size -> SIZE_ID repeated_size','repeated_size',2,'p_repeated_size','parserules.py',72),
  ('repeated_size -> empty','repeated_size',1,'p_repeated_size','parserules.py',73),
  ('repeated_identifier -> IDENTIFIER COMMA repeated_identifier','repeated_identifier',3,'p_repeated_identifier','parserules.py',79),
  ('repeated_identifier -> IDENTIFIER','repeated_identifier',1,'p_repeated_identifier','parserules.py',80),
  ('type -> INT_TYPE','type',1,'p_var_type','parserules.py',96),
  ('type -> FLOAT_TYPE','type',1,'p_var_type','parserules.py',97),
  ('block -> statement block','block',2,'p_block','parserules.py',103),
  ('block -> empty','block',1,'p_block','parserules.py',104),
  ('statement -> GOTO LABEL','statement',2,'p_statement','parserules.py',110),
  ('statement -> LABEL_SALTO','statement',1,'p_statement','parserules.py',111),
  ('statement -> FOR aux1 TO aux2 block NEXT aux3','statement',7,'p_statement_for','parserules.py',119),
  ('aux1 -> IDENTIFIER EQUALS expression','aux1',3,'p_for_aux1','parserules.py',125),
  ('aux2 -> expression','aux2',1,'p_for_aux2','parserules.py',139),
  ('aux3 -> IDENTIFIER','aux3',1,'p_for_aux3','parserules.py',162),
  ('statement -> DO do_while_inicio block LOOP WHILE aux_do_while','statement',6,'p_statement_do_while','parserules.py',182),
  ('do_while_inicio -> empty','do_while_inicio',1,'p_do_while_inicio','parserules.py',188),
  ('aux_do_while -> expression','aux_do_while',1,'p_aux_do_while','parserules.py',198),
  ('statement -> WHILE aux_while DO block LOOP fin_while','statement',6,'p_statement_while','parserules.py',214),
  ('aux_while -> expression','aux_while',1,'p_aux_while','parserules.py',220),
  ('fin_while -> empty','fin_while',1,'p_aux_fin_while','parserules.py',235),
  ('statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin','statement',10,'p_statement_if','parserules.py',253),
  ('aux_if -> expression','aux_if',1,'p_aux_if','parserules.py',259),
  ('aux_else -> empty','aux_else',1,'p_aux_else','parserules.py',270),
  ('aux_fin -> empty','aux_fin',1,'p_aux_if_fin','parserules.py',286),
  ('statement -> LET IDENTIFIER repeated_size EQUALS expression','statement',5,'p_statement_assignment','parserules.py',294),
  ('statement -> CALL LABEL','statement',2,'p_statement_procedure','parserules.py',307),
  ('procedure -> aux_label block aux_return procedure','procedure',4,'p_procedure','parserules.py',318),
  ('procedure -> empty','procedure',1,'p_procedure','parserules.py',319),
  ('aux_label -> LABEL','aux_label',1,'p_procedure_label','parserules.py',325),
  ('aux_return -> RETURN','aux_return',1,'p_procedure_return','parserules.py',333),
  ('statement -> INPUT repeated_print','statement',2,'p_statement_input','parserules.py',348),
  ('statement -> PRINT repeated_print','statement',2,'p_statement_print','parserules.py',359),
  ('repeated_print -> repeated_elem COMMA repeated_print','repeated_print',3,'p_repeated_print','parserules.py',371),
  ('repeated_print -> repeated_elem','repeated_print',1,'p_repeated_print','parserules.py',372),
  ('repeated_elem -> STRING','repeated_elem',1,'p_repeated_elem','parserules.py',381),
  ('repeated_elem -> elem','repeated_elem',1,'p_repeated_elem','parserules.py',382),
  ('expression -> expression_s op_rel expression_s','expression',3,'p_expression','parserules.py',390),
  ('expression -> expression_s','expression',1,'p_expression','parserules.py',391),
  ('expression_s -> term','expression_s',1,'p_expression_s','parserules.py',400),
  ('expression_s -> term PLUS expression_s','expression_s',3,'p_expression_s','parserules.py',401),
  ('expression_s -> term MINUS expression_s','expression_s',3,'p_expression_s','parserules.py',402),
  ('expression_s -> term OR expression_s','expression_s',3,'p_expression_s','parserules.py',403),
  ('term -> factor','term',1,'p_term','parserules.py',412),
  ('term -> factor MULTIPLY term','term',3,'p_term','parserules.py',413),
  ('term -> factor DIVIDE term','term',3,'p_term','parserules.py',414),
  ('term -> factor AND term','term',3,'p_term','parserules.py',415),
  ('factor -> elem','factor',1,'p_factor','parserules.py',424),
  ('factor -> OPENPAR expression CLOSEPAR','factor',3,'p_factor','parserules.py',425),
  ('elem -> INT','elem',1,'p_elem','parserules.py',434),
  ('elem -> IDENTIFIER repeated_size','elem',2,'p_elem','parserules.py',435),
  ('elem -> elem_else','elem',1,'p_elem','parserules.py',436),
  ('elem_else -> FLOAT','elem_else',1,'p_elem_float','parserules.py',445),
  ('op_rel -> LESSTHANOREQUAL','op_rel',1,'p_op_rel','parserules.py',451),
  ('op_rel -> GREATERTHANOREQUAL','op_rel',1,'p_op_rel','parserules.py',452),
  ('op_rel -> ISEQUALTO','op_rel',1,'p_op_rel','parserules.py',453),
  ('op_rel -> GREATERTHAN','op_rel',1,'p_op_rel','parserules.py',454),
  ('op_rel -> LESSTHAN','op_rel',1,'p_op_rel','parserules.py',455),
  ('empty -> <empty>','empty',0,'p_empty','parserules.py',466),
]
