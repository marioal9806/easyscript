
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS CLOSEPAR COMMA DIM DIVIDE DO ELSE END EQUALS FLOAT FLOAT_TYPE FOR GOSUB GOTO GREATERTHAN GREATERTHANOREQUAL IDENTIFIER IF INPUT INT INT_TYPE ISEQUALTO LABEL LABEL_SALTO LESSTHAN LESSTHANOREQUAL LET LOOP MINUS MULTIPLY NEXT OPENPAR OR PLUS PRINT PROGRAM RETURN SIZE SIZE_ID STRING STRING_TYPE THEN TO WHILE\n    programa : PROGRAM var procedure block END\n    \n    var : DIM repeated_identifier AS type repeated_size var\n        | DIM repeated_identifier AS STRING_TYPE var\n        | empty\n    \n    repeated_size : SIZE repeated_size\n                    | SIZE_ID repeated_size\n                    | empty\n    \n    repeated_identifier : IDENTIFIER COMMA repeated_identifier\n                        | IDENTIFIER\n    \n    type : INT_TYPE\n            | FLOAT_TYPE\n    \n    block : statement block\n            | empty\n    \n    statement : GOSUB LABEL\n        | GOTO LABEL\n        | LABEL_SALTO\n    \n    statement : FOR aux1 TO aux2 block NEXT aux3\n    \n    aux1 : IDENTIFIER EQUALS expression\n    \n    aux2 : expression\n    \n    aux3 : IDENTIFIER\n    \n    statement : DO do_while_inicio block LOOP WHILE aux_do_while\n    \n    do_while_inicio : empty\n    \n    aux_do_while : expression\n    \n    statement : WHILE aux_while DO block LOOP fin_while\n    \n    aux_while : expression\n    \n    fin_while : empty\n    \n    statement : IF aux_if THEN block ELSE aux_else block END IF aux_fin\n    \n    aux_if : expression\n    \n    aux_else : empty\n    \n    aux_fin : empty\n    \n    statement : LET IDENTIFIER repeated_size EQUALS expression\n    \n    procedure : LABEL block RETURN procedure\n                | empty\n    \n    statement : INPUT repeated_print\n    \n    statement : PRINT repeated_print\n    \n    repeated_print : repeated_elem COMMA repeated_print\n                    | repeated_elem\n    \n    repeated_elem : STRING\n                    | elem\n    \n    expression : expression_s op_rel expression_s\n                | expression_s\n    \n    expression_s : term \n                | term PLUS expression_s\n                | term MINUS expression_s\n                | term OR expression_s\n    \n    term : factor\n        | factor MULTIPLY term\n        | factor DIVIDE term\n        | factor AND term\n    \n    factor : elem\n            | OPENPAR expression CLOSEPAR\n    \n    elem : INT\n        | IDENTIFIER repeated_size\n        | elem_else\n    \n    elem_else : FLOAT\n    \n    op_rel : LESSTHANOREQUAL\n            | GREATERTHANOREQUAL\n            | ISEQUALTO\n            | GREATERTHAN\n            | LESSTHAN\n\n    \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,27,],[0,-1,]),'DIM':([2,55,56,57,58,78,79,80,85,100,101,],[4,-61,4,-10,-11,-61,-61,-7,4,-5,-6,]),'LABEL':([2,3,5,14,15,54,55,56,57,58,78,79,80,85,86,100,101,105,],[-61,7,-4,29,30,7,-61,-61,-10,-11,-61,-61,-7,-61,-3,-5,-6,-2,]),'GOSUB':([2,3,5,6,7,8,12,16,18,29,30,33,34,37,38,39,40,42,43,44,45,49,50,51,52,53,54,55,56,57,58,63,77,78,79,80,81,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,104,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,14,14,-33,14,-16,-61,-14,-15,14,-22,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-61,-61,-61,-10,-11,14,-53,-61,-61,-7,14,-32,-61,-3,14,-19,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-2,-61,-61,-31,-21,-23,-24,-26,14,-29,-17,-20,-61,-27,-30,]),'GOTO':([2,3,5,6,7,8,12,16,18,29,30,33,34,37,38,39,40,42,43,44,45,49,50,51,52,53,54,55,56,57,58,63,77,78,79,80,81,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,104,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,15,15,-33,15,-16,-61,-14,-15,15,-22,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-61,-61,-61,-10,-11,15,-53,-61,-61,-7,15,-32,-61,-3,15,-19,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-2,-61,-61,-31,-21,-23,-24,-26,15,-29,-17,-20,-61,-27,-30,]),'LABEL_SALTO':([2,3,5,6,7,8,12,16,18,29,30,33,34,37,38,39,40,42,43,44,45,49,50,51,52,53,54,55,56,57,58,63,77,78,79,80,81,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,104,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,16,16,-33,16,-16,-61,-14,-15,16,-22,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-61,-61,-61,-10,-11,16,-53,-61,-61,-7,16,-32,-61,-3,16,-19,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-2,-61,-61,-31,-21,-23,-24,-26,16,-29,-17,-20,-61,-27,-30,]),'FOR':([2,3,5,6,7,8,12,16,18,29,30,33,34,37,38,39,40,42,43,44,45,49,50,51,52,53,54,55,56,57,58,63,77,78,79,80,81,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,104,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,17,17,-33,17,-16,-61,-14,-15,17,-22,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-61,-61,-61,-10,-11,17,-53,-61,-61,-7,17,-32,-61,-3,17,-19,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-2,-61,-61,-31,-21,-23,-24,-26,17,-29,-17,-20,-61,-27,-30,]),'DO':([2,3,5,6,7,8,12,16,18,29,30,33,34,35,36,37,38,39,40,42,43,44,45,49,50,51,52,53,54,55,56,57,58,63,77,78,79,80,81,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,104,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,18,18,-33,18,-16,-61,-14,-15,18,-22,63,-25,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-61,-61,-61,-10,-11,18,-53,-61,-61,-7,18,-32,-61,-3,18,-19,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-2,-61,-61,-31,-21,-23,-24,-26,18,-29,-17,-20,-61,-27,-30,]),'WHILE':([2,3,5,6,7,8,12,16,18,29,30,33,34,37,38,39,40,42,43,44,45,49,50,51,52,53,54,55,56,57,58,63,77,78,79,80,81,84,85,86,87,88,90,92,93,94,95,96,97,98,99,100,101,104,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,19,19,-33,19,-16,-61,-14,-15,19,-22,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-61,-61,-61,-10,-11,19,-53,-61,-61,-7,19,-32,-61,-3,19,-19,107,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-2,-61,-61,-31,-21,-23,-24,-26,19,-29,-17,-20,-61,-27,-30,]),'IF':([2,3,5,6,7,8,12,16,18,29,30,33,34,37,38,39,40,42,43,44,45,49,50,51,52,53,54,55,56,57,58,63,77,78,79,80,81,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,104,105,108,109,110,112,113,114,115,116,117,118,119,121,122,123,124,],[-61,-61,-4,20,20,-33,20,-16,-61,-14,-15,20,-22,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-61,-61,-61,-10,-11,20,-53,-61,-61,-7,20,-32,-61,-3,20,-19,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-2,-61,-61,-31,-21,-23,-24,-26,20,-29,-17,-20,122,-61,-27,-30,]),'LET':([2,3,5,6,7,8,12,16,18,29,30,33,34,37,38,39,40,42,43,44,45,49,50,51,52,53,54,55,56,57,58,63,77,78,79,80,81,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,104,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,21,21,-33,21,-16,-61,-14,-15,21,-22,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-61,-61,-61,-10,-11,21,-53,-61,-61,-7,21,-32,-61,-3,21,-19,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-2,-61,-61,-31,-21,-23,-24,-26,21,-29,-17,-20,-61,-27,-30,]),'INPUT':([2,3,5,6,7,8,12,16,18,29,30,33,34,37,38,39,40,42,43,44,45,49,50,51,52,53,54,55,56,57,58,63,77,78,79,80,81,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,104,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,22,22,-33,22,-16,-61,-14,-15,22,-22,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-61,-61,-61,-10,-11,22,-53,-61,-61,-7,22,-32,-61,-3,22,-19,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-2,-61,-61,-31,-21,-23,-24,-26,22,-29,-17,-20,-61,-27,-30,]),'PRINT':([2,3,5,6,7,8,12,16,18,29,30,33,34,37,38,39,40,42,43,44,45,49,50,51,52,53,54,55,56,57,58,63,77,78,79,80,81,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,104,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,23,23,-33,23,-16,-61,-14,-15,23,-22,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-61,-61,-61,-10,-11,23,-53,-61,-61,-7,23,-32,-61,-3,23,-19,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-2,-61,-61,-31,-21,-23,-24,-26,23,-29,-17,-20,-61,-27,-30,]),'END':([2,3,5,6,8,11,12,13,16,28,29,30,37,38,39,40,42,43,44,45,49,50,51,52,53,54,55,56,57,58,77,78,79,80,84,85,86,92,93,94,95,96,97,98,99,100,101,104,105,108,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-61,-61,-4,-61,-33,27,-61,-13,-16,-12,-14,-15,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-61,-61,-61,-10,-11,-53,-61,-61,-7,-32,-61,-3,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-2,-61,-61,-31,-21,-23,-24,-26,-61,-29,-17,-20,121,-61,-27,-30,]),'IDENTIFIER':([4,17,19,20,21,22,23,26,41,60,61,64,65,66,67,68,69,70,71,72,73,74,75,83,103,107,111,],[10,32,43,43,48,43,43,10,43,43,43,43,-56,-57,-58,-59,-60,43,43,43,43,43,43,43,43,43,119,]),'RETURN':([7,12,13,16,24,28,29,30,37,38,39,40,42,43,44,45,49,50,51,52,53,77,78,79,80,92,93,94,95,96,97,98,99,100,101,104,108,110,112,113,114,115,118,119,122,123,124,],[-61,-61,-13,-16,54,-12,-14,-15,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-53,-61,-61,-7,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-61,-31,-21,-23,-24,-26,-17,-20,-61,-27,-30,]),'AS':([9,10,59,],[25,-9,-8,]),'COMMA':([10,42,43,44,45,50,51,52,77,78,79,80,100,101,],[26,-52,-61,-54,-55,83,-38,-39,-53,-61,-61,-7,-5,-6,]),'LOOP':([12,13,16,18,28,29,30,33,34,37,38,39,40,42,43,44,45,49,50,51,52,53,62,63,77,78,79,80,91,92,93,94,95,96,97,98,99,100,101,104,108,110,112,113,114,115,118,119,122,123,124,],[-61,-13,-16,-61,-12,-14,-15,-61,-22,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,90,-61,-53,-61,-61,-7,108,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,-61,-31,-21,-23,-24,-26,-17,-20,-61,-27,-30,]),'ELSE':([12,13,16,28,29,30,37,38,39,40,42,43,44,45,49,50,51,52,53,77,78,79,80,81,92,93,94,95,96,97,98,99,100,101,102,104,108,110,112,113,114,115,118,119,122,123,124,],[-61,-13,-16,-12,-14,-15,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-53,-61,-61,-7,-61,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,109,-36,-61,-31,-21,-23,-24,-26,-17,-20,-61,-27,-30,]),'NEXT':([12,13,16,28,29,30,37,38,39,40,42,43,44,45,49,50,51,52,53,77,78,79,80,87,88,92,93,94,95,96,97,98,99,100,101,104,106,108,110,112,113,114,115,118,119,122,123,124,],[-61,-13,-16,-12,-14,-15,-41,-42,-46,-50,-52,-61,-54,-55,-34,-37,-38,-39,-35,-53,-61,-61,-7,-61,-19,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,-36,111,-61,-31,-21,-23,-24,-26,-17,-20,-61,-27,-30,]),'OPENPAR':([19,20,41,60,61,64,65,66,67,68,69,70,71,72,73,74,75,103,107,],[41,41,41,41,41,41,-56,-57,-58,-59,-60,41,41,41,41,41,41,41,41,]),'INT':([19,20,22,23,41,60,61,64,65,66,67,68,69,70,71,72,73,74,75,83,103,107,],[42,42,42,42,42,42,42,42,-56,-57,-58,-59,-60,42,42,42,42,42,42,42,42,42,]),'FLOAT':([19,20,22,23,41,60,61,64,65,66,67,68,69,70,71,72,73,74,75,83,103,107,],[45,45,45,45,45,45,45,45,-56,-57,-58,-59,-60,45,45,45,45,45,45,45,45,45,]),'STRING':([22,23,83,],[51,51,51,]),'STRING_TYPE':([25,],[56,]),'INT_TYPE':([25,],[57,]),'FLOAT_TYPE':([25,],[58,]),'TO':([31,37,38,39,40,42,43,44,45,77,78,79,80,89,92,93,94,95,96,97,98,99,100,101,],[60,-41,-42,-46,-50,-52,-61,-54,-55,-53,-61,-61,-7,-18,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,]),'EQUALS':([32,48,78,79,80,82,100,101,],[61,-61,-61,-61,-7,103,-5,-6,]),'THEN':([37,38,39,40,42,43,44,45,46,47,77,78,79,80,92,93,94,95,96,97,98,99,100,101,],[-41,-42,-46,-50,-52,-61,-54,-55,81,-28,-53,-61,-61,-7,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,]),'CLOSEPAR':([37,38,39,40,42,43,44,45,76,77,78,79,80,92,93,94,95,96,97,98,99,100,101,],[-41,-42,-46,-50,-52,-61,-54,-55,99,-53,-61,-61,-7,-40,-43,-44,-45,-47,-48,-49,-51,-5,-6,]),'LESSTHANOREQUAL':([37,38,39,40,42,43,44,45,77,78,79,80,93,94,95,96,97,98,99,100,101,],[65,-42,-46,-50,-52,-61,-54,-55,-53,-61,-61,-7,-43,-44,-45,-47,-48,-49,-51,-5,-6,]),'GREATERTHANOREQUAL':([37,38,39,40,42,43,44,45,77,78,79,80,93,94,95,96,97,98,99,100,101,],[66,-42,-46,-50,-52,-61,-54,-55,-53,-61,-61,-7,-43,-44,-45,-47,-48,-49,-51,-5,-6,]),'ISEQUALTO':([37,38,39,40,42,43,44,45,77,78,79,80,93,94,95,96,97,98,99,100,101,],[67,-42,-46,-50,-52,-61,-54,-55,-53,-61,-61,-7,-43,-44,-45,-47,-48,-49,-51,-5,-6,]),'GREATERTHAN':([37,38,39,40,42,43,44,45,77,78,79,80,93,94,95,96,97,98,99,100,101,],[68,-42,-46,-50,-52,-61,-54,-55,-53,-61,-61,-7,-43,-44,-45,-47,-48,-49,-51,-5,-6,]),'LESSTHAN':([37,38,39,40,42,43,44,45,77,78,79,80,93,94,95,96,97,98,99,100,101,],[69,-42,-46,-50,-52,-61,-54,-55,-53,-61,-61,-7,-43,-44,-45,-47,-48,-49,-51,-5,-6,]),'PLUS':([38,39,40,42,43,44,45,77,78,79,80,96,97,98,99,100,101,],[70,-46,-50,-52,-61,-54,-55,-53,-61,-61,-7,-47,-48,-49,-51,-5,-6,]),'MINUS':([38,39,40,42,43,44,45,77,78,79,80,96,97,98,99,100,101,],[71,-46,-50,-52,-61,-54,-55,-53,-61,-61,-7,-47,-48,-49,-51,-5,-6,]),'OR':([38,39,40,42,43,44,45,77,78,79,80,96,97,98,99,100,101,],[72,-46,-50,-52,-61,-54,-55,-53,-61,-61,-7,-47,-48,-49,-51,-5,-6,]),'MULTIPLY':([39,40,42,43,44,45,77,78,79,80,99,100,101,],[73,-50,-52,-61,-54,-55,-53,-61,-61,-7,-51,-5,-6,]),'DIVIDE':([39,40,42,43,44,45,77,78,79,80,99,100,101,],[74,-50,-52,-61,-54,-55,-53,-61,-61,-7,-51,-5,-6,]),'AND':([39,40,42,43,44,45,77,78,79,80,99,100,101,],[75,-50,-52,-61,-54,-55,-53,-61,-61,-7,-51,-5,-6,]),'SIZE':([43,48,55,57,58,78,79,],[78,78,78,-10,-11,78,78,]),'SIZE_ID':([43,48,55,57,58,78,79,],[79,79,79,-10,-11,79,79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'var':([2,56,85,],[3,86,105,]),'empty':([2,3,6,7,12,18,33,43,48,54,55,56,63,78,79,81,85,87,108,109,116,122,],[5,8,13,13,13,34,13,80,80,8,80,5,13,80,80,13,5,13,115,117,13,124,]),'procedure':([3,54,],[6,84,]),'repeated_identifier':([4,26,],[9,59,]),'block':([6,7,12,33,63,81,87,116,],[11,24,28,62,91,102,106,120,]),'statement':([6,7,12,33,63,81,87,116,],[12,12,12,12,12,12,12,12,]),'aux1':([17,],[31,]),'do_while_inicio':([18,],[33,]),'aux_while':([19,],[35,]),'expression':([19,20,41,60,61,103,107,],[36,47,76,88,89,110,113,]),'expression_s':([19,20,41,60,61,64,70,71,72,103,107,],[37,37,37,37,37,92,93,94,95,37,37,]),'term':([19,20,41,60,61,64,70,71,72,73,74,75,103,107,],[38,38,38,38,38,38,38,38,38,96,97,98,38,38,]),'factor':([19,20,41,60,61,64,70,71,72,73,74,75,103,107,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'elem':([19,20,22,23,41,60,61,64,70,71,72,73,74,75,83,103,107,],[40,40,52,52,40,40,40,40,40,40,40,40,40,40,52,40,40,]),'elem_else':([19,20,22,23,41,60,61,64,70,71,72,73,74,75,83,103,107,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'aux_if':([20,],[46,]),'repeated_print':([22,23,83,],[49,53,104,]),'repeated_elem':([22,23,83,],[50,50,50,]),'type':([25,],[55,]),'op_rel':([37,],[64,]),'repeated_size':([43,48,55,78,79,],[77,82,85,100,101,]),'aux2':([60,],[87,]),'aux_do_while':([107,],[112,]),'fin_while':([108,],[114,]),'aux_else':([109,],[116,]),'aux3':([111,],[118,]),'aux_fin':([122,],[123,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM var procedure block END','programa',5,'p_programa','parserules.py',40),
  ('var -> DIM repeated_identifier AS type repeated_size var','var',6,'p_var','parserules.py',46),
  ('var -> DIM repeated_identifier AS STRING_TYPE var','var',5,'p_var','parserules.py',47),
  ('var -> empty','var',1,'p_var','parserules.py',48),
  ('repeated_size -> SIZE repeated_size','repeated_size',2,'p_repeated_size','parserules.py',57),
  ('repeated_size -> SIZE_ID repeated_size','repeated_size',2,'p_repeated_size','parserules.py',58),
  ('repeated_size -> empty','repeated_size',1,'p_repeated_size','parserules.py',59),
  ('repeated_identifier -> IDENTIFIER COMMA repeated_identifier','repeated_identifier',3,'p_repeated_identifier','parserules.py',65),
  ('repeated_identifier -> IDENTIFIER','repeated_identifier',1,'p_repeated_identifier','parserules.py',66),
  ('type -> INT_TYPE','type',1,'p_var_type','parserules.py',82),
  ('type -> FLOAT_TYPE','type',1,'p_var_type','parserules.py',83),
  ('block -> statement block','block',2,'p_block','parserules.py',89),
  ('block -> empty','block',1,'p_block','parserules.py',90),
  ('statement -> GOSUB LABEL','statement',2,'p_statement','parserules.py',96),
  ('statement -> GOTO LABEL','statement',2,'p_statement','parserules.py',97),
  ('statement -> LABEL_SALTO','statement',1,'p_statement','parserules.py',98),
  ('statement -> FOR aux1 TO aux2 block NEXT aux3','statement',7,'p_statement_for','parserules.py',106),
  ('aux1 -> IDENTIFIER EQUALS expression','aux1',3,'p_for_aux1','parserules.py',112),
  ('aux2 -> expression','aux2',1,'p_for_aux2','parserules.py',126),
  ('aux3 -> IDENTIFIER','aux3',1,'p_for_aux3','parserules.py',149),
  ('statement -> DO do_while_inicio block LOOP WHILE aux_do_while','statement',6,'p_statement_do_while','parserules.py',169),
  ('do_while_inicio -> empty','do_while_inicio',1,'p_do_while_inicio','parserules.py',175),
  ('aux_do_while -> expression','aux_do_while',1,'p_aux_do_while','parserules.py',185),
  ('statement -> WHILE aux_while DO block LOOP fin_while','statement',6,'p_statement_while','parserules.py',201),
  ('aux_while -> expression','aux_while',1,'p_aux_while','parserules.py',207),
  ('fin_while -> empty','fin_while',1,'p_aux_fin_while','parserules.py',222),
  ('statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin','statement',10,'p_statement_if','parserules.py',240),
  ('aux_if -> expression','aux_if',1,'p_aux_if','parserules.py',246),
  ('aux_else -> empty','aux_else',1,'p_aux_else','parserules.py',257),
  ('aux_fin -> empty','aux_fin',1,'p_aux_if_fin','parserules.py',273),
  ('statement -> LET IDENTIFIER repeated_size EQUALS expression','statement',5,'p_statement_assignment','parserules.py',281),
  ('procedure -> LABEL block RETURN procedure','procedure',4,'p_procedure','parserules.py',292),
  ('procedure -> empty','procedure',1,'p_procedure','parserules.py',293),
  ('statement -> INPUT repeated_print','statement',2,'p_statement_input','parserules.py',301),
  ('statement -> PRINT repeated_print','statement',2,'p_statement_print','parserules.py',313),
  ('repeated_print -> repeated_elem COMMA repeated_print','repeated_print',3,'p_repeated_print','parserules.py',325),
  ('repeated_print -> repeated_elem','repeated_print',1,'p_repeated_print','parserules.py',326),
  ('repeated_elem -> STRING','repeated_elem',1,'p_repeated_elem','parserules.py',335),
  ('repeated_elem -> elem','repeated_elem',1,'p_repeated_elem','parserules.py',336),
  ('expression -> expression_s op_rel expression_s','expression',3,'p_expression','parserules.py',344),
  ('expression -> expression_s','expression',1,'p_expression','parserules.py',345),
  ('expression_s -> term','expression_s',1,'p_expression_s','parserules.py',354),
  ('expression_s -> term PLUS expression_s','expression_s',3,'p_expression_s','parserules.py',355),
  ('expression_s -> term MINUS expression_s','expression_s',3,'p_expression_s','parserules.py',356),
  ('expression_s -> term OR expression_s','expression_s',3,'p_expression_s','parserules.py',357),
  ('term -> factor','term',1,'p_term','parserules.py',366),
  ('term -> factor MULTIPLY term','term',3,'p_term','parserules.py',367),
  ('term -> factor DIVIDE term','term',3,'p_term','parserules.py',368),
  ('term -> factor AND term','term',3,'p_term','parserules.py',369),
  ('factor -> elem','factor',1,'p_factor','parserules.py',378),
  ('factor -> OPENPAR expression CLOSEPAR','factor',3,'p_factor','parserules.py',379),
  ('elem -> INT','elem',1,'p_elem','parserules.py',388),
  ('elem -> IDENTIFIER repeated_size','elem',2,'p_elem','parserules.py',389),
  ('elem -> elem_else','elem',1,'p_elem','parserules.py',390),
  ('elem_else -> FLOAT','elem_else',1,'p_elem_float','parserules.py',399),
  ('op_rel -> LESSTHANOREQUAL','op_rel',1,'p_op_rel','parserules.py',405),
  ('op_rel -> GREATERTHANOREQUAL','op_rel',1,'p_op_rel','parserules.py',406),
  ('op_rel -> ISEQUALTO','op_rel',1,'p_op_rel','parserules.py',407),
  ('op_rel -> GREATERTHAN','op_rel',1,'p_op_rel','parserules.py',408),
  ('op_rel -> LESSTHAN','op_rel',1,'p_op_rel','parserules.py',409),
  ('empty -> <empty>','empty',0,'p_empty','parserules.py',420),
]
