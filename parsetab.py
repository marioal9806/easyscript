
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS CLOSEPAR COMMA DIM DIVIDE DO ELSE END EQUALS FLOAT FLOAT_TYPE FOR GOSUB GOTO GREATERTHAN GREATERTHANOREQUAL IDENTIFIER IF INPUT INT INT_TYPE ISEQUALTO LABEL LABEL_SALTO LESSTHAN LESSTHANOREQUAL LET LOOP MINUS MULTIPLY NEXT OPENPAR OR PLUS PRINT PROGRAM RETURN SIZE SIZE_ID STRING STRING_TYPE THEN TO WHILE\n    programa : PROGRAM var procedure block END\n    \n    var : DIM repeated_identifier AS type repeated_size var\n        | DIM repeated_identifier AS STRING_TYPE var\n        | empty\n    \n    repeated_size : SIZE repeated_size\n                    | SIZE_ID repeated_size\n                    | empty\n    \n    repeated_identifier : IDENTIFIER COMMA repeated_identifier\n                        | IDENTIFIER\n    \n    type : INT_TYPE\n            | FLOAT_TYPE\n    \n    block : statement block\n            | empty\n    \n    statement : INPUT repeated_print\n        | PRINT repeated_print\n        | GOSUB LABEL\n        | GOTO LABEL\n        | LABEL_SALTO\n    \n    statement : FOR aux1 TO aux2 block NEXT aux3\n    \n    aux1 : IDENTIFIER EQUALS expression\n    \n    aux2 : expression\n    \n    aux3 : IDENTIFIER\n    \n    statement : DO do_while_inicio block LOOP WHILE aux_do_while\n    \n    do_while_inicio : empty\n    \n    aux_do_while : expression\n    \n    statement : WHILE aux_while DO block LOOP fin_while\n    \n    aux_while : expression\n    \n    fin_while : empty\n    \n    statement : IF aux_if THEN block ELSE aux_else block END IF aux_fin\n    \n    aux_if : expression\n    \n    aux_else : empty\n    \n    aux_fin : empty\n    \n    statement : LET IDENTIFIER repeated_size EQUALS expression\n    \n    procedure : LABEL block RETURN procedure\n                | empty\n    \n    repeated_print : repeated_elem COMMA repeated_print\n                    | repeated_elem\n    \n    repeated_elem : STRING\n                    | elem\n    \n    expression : expression_s op_rel expression_s\n                | expression_s\n    \n    expression_s : term \n                | term PLUS expression_s\n                | term MINUS expression_s\n                | term OR expression_s\n    \n    term : factor\n        | factor MULTIPLY term\n        | factor DIVIDE term\n        | factor AND term\n    \n    factor : elem\n            | OPENPAR expression CLOSEPAR\n    \n    elem : INT\n        | IDENTIFIER repeated_size\n        | elem_else\n    \n    elem_else : FLOAT\n    \n    op_rel : LESSTHANOREQUAL\n            | GREATERTHANOREQUAL\n            | ISEQUALTO\n            | GREATERTHAN\n            | LESSTHAN\n\n    \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,27,],[0,-1,]),'DIM':([2,55,56,57,58,62,63,64,85,88,89,],[4,-61,4,-10,-11,-61,-61,-7,4,-5,-6,]),'LABEL':([2,3,5,16,17,54,55,56,57,58,62,63,64,85,86,88,89,105,],[-61,7,-4,38,39,7,-61,-61,-10,-11,-61,-61,-7,-61,-3,-5,-6,-2,]),'INPUT':([2,3,5,6,7,8,12,18,20,29,30,31,32,33,34,35,36,37,38,39,42,43,46,47,48,49,54,55,56,57,58,61,62,63,64,68,82,84,85,86,87,88,89,90,91,95,96,97,98,99,100,101,102,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,14,14,-35,14,-18,-61,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,14,-24,-41,-42,-46,-50,-61,-61,-61,-10,-11,-53,-61,-61,-7,14,14,-34,-61,-3,-36,-5,-6,14,-21,-40,-43,-44,-45,-47,-48,-49,-51,-2,-61,-61,-33,-23,-25,-26,-28,14,-31,-19,-22,-61,-29,-32,]),'PRINT':([2,3,5,6,7,8,12,18,20,29,30,31,32,33,34,35,36,37,38,39,42,43,46,47,48,49,54,55,56,57,58,61,62,63,64,68,82,84,85,86,87,88,89,90,91,95,96,97,98,99,100,101,102,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,15,15,-35,15,-18,-61,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,15,-24,-41,-42,-46,-50,-61,-61,-61,-10,-11,-53,-61,-61,-7,15,15,-34,-61,-3,-36,-5,-6,15,-21,-40,-43,-44,-45,-47,-48,-49,-51,-2,-61,-61,-33,-23,-25,-26,-28,15,-31,-19,-22,-61,-29,-32,]),'GOSUB':([2,3,5,6,7,8,12,18,20,29,30,31,32,33,34,35,36,37,38,39,42,43,46,47,48,49,54,55,56,57,58,61,62,63,64,68,82,84,85,86,87,88,89,90,91,95,96,97,98,99,100,101,102,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,16,16,-35,16,-18,-61,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,16,-24,-41,-42,-46,-50,-61,-61,-61,-10,-11,-53,-61,-61,-7,16,16,-34,-61,-3,-36,-5,-6,16,-21,-40,-43,-44,-45,-47,-48,-49,-51,-2,-61,-61,-33,-23,-25,-26,-28,16,-31,-19,-22,-61,-29,-32,]),'GOTO':([2,3,5,6,7,8,12,18,20,29,30,31,32,33,34,35,36,37,38,39,42,43,46,47,48,49,54,55,56,57,58,61,62,63,64,68,82,84,85,86,87,88,89,90,91,95,96,97,98,99,100,101,102,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,17,17,-35,17,-18,-61,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,17,-24,-41,-42,-46,-50,-61,-61,-61,-10,-11,-53,-61,-61,-7,17,17,-34,-61,-3,-36,-5,-6,17,-21,-40,-43,-44,-45,-47,-48,-49,-51,-2,-61,-61,-33,-23,-25,-26,-28,17,-31,-19,-22,-61,-29,-32,]),'LABEL_SALTO':([2,3,5,6,7,8,12,18,20,29,30,31,32,33,34,35,36,37,38,39,42,43,46,47,48,49,54,55,56,57,58,61,62,63,64,68,82,84,85,86,87,88,89,90,91,95,96,97,98,99,100,101,102,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,18,18,-35,18,-18,-61,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,18,-24,-41,-42,-46,-50,-61,-61,-61,-10,-11,-53,-61,-61,-7,18,18,-34,-61,-3,-36,-5,-6,18,-21,-40,-43,-44,-45,-47,-48,-49,-51,-2,-61,-61,-33,-23,-25,-26,-28,18,-31,-19,-22,-61,-29,-32,]),'FOR':([2,3,5,6,7,8,12,18,20,29,30,31,32,33,34,35,36,37,38,39,42,43,46,47,48,49,54,55,56,57,58,61,62,63,64,68,82,84,85,86,87,88,89,90,91,95,96,97,98,99,100,101,102,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,19,19,-35,19,-18,-61,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,19,-24,-41,-42,-46,-50,-61,-61,-61,-10,-11,-53,-61,-61,-7,19,19,-34,-61,-3,-36,-5,-6,19,-21,-40,-43,-44,-45,-47,-48,-49,-51,-2,-61,-61,-33,-23,-25,-26,-28,19,-31,-19,-22,-61,-29,-32,]),'DO':([2,3,5,6,7,8,12,18,20,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,54,55,56,57,58,61,62,63,64,68,82,84,85,86,87,88,89,90,91,95,96,97,98,99,100,101,102,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,20,20,-35,20,-18,-61,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,20,-24,68,-27,-41,-42,-46,-50,-61,-61,-61,-10,-11,-53,-61,-61,-7,20,20,-34,-61,-3,-36,-5,-6,20,-21,-40,-43,-44,-45,-47,-48,-49,-51,-2,-61,-61,-33,-23,-25,-26,-28,20,-31,-19,-22,-61,-29,-32,]),'WHILE':([2,3,5,6,7,8,12,18,20,29,30,31,32,33,34,35,36,37,38,39,42,43,46,47,48,49,54,55,56,57,58,61,62,63,64,68,82,84,85,86,87,88,89,90,91,93,95,96,97,98,99,100,101,102,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,21,21,-35,21,-18,-61,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,21,-24,-41,-42,-46,-50,-61,-61,-61,-10,-11,-53,-61,-61,-7,21,21,-34,-61,-3,-36,-5,-6,21,-21,107,-40,-43,-44,-45,-47,-48,-49,-51,-2,-61,-61,-33,-23,-25,-26,-28,21,-31,-19,-22,-61,-29,-32,]),'IF':([2,3,5,6,7,8,12,18,20,29,30,31,32,33,34,35,36,37,38,39,42,43,46,47,48,49,54,55,56,57,58,61,62,63,64,68,82,84,85,86,87,88,89,90,91,95,96,97,98,99,100,101,102,105,108,109,110,112,113,114,115,116,117,118,119,121,122,123,124,],[-61,-61,-4,22,22,-35,22,-18,-61,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,22,-24,-41,-42,-46,-50,-61,-61,-61,-10,-11,-53,-61,-61,-7,22,22,-34,-61,-3,-36,-5,-6,22,-21,-40,-43,-44,-45,-47,-48,-49,-51,-2,-61,-61,-33,-23,-25,-26,-28,22,-31,-19,-22,122,-61,-29,-32,]),'LET':([2,3,5,6,7,8,12,18,20,29,30,31,32,33,34,35,36,37,38,39,42,43,46,47,48,49,54,55,56,57,58,61,62,63,64,68,82,84,85,86,87,88,89,90,91,95,96,97,98,99,100,101,102,105,108,109,110,112,113,114,115,116,117,118,119,122,123,124,],[-61,-61,-4,23,23,-35,23,-18,-61,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,23,-24,-41,-42,-46,-50,-61,-61,-61,-10,-11,-53,-61,-61,-7,23,23,-34,-61,-3,-36,-5,-6,23,-21,-40,-43,-44,-45,-47,-48,-49,-51,-2,-61,-61,-33,-23,-25,-26,-28,23,-31,-19,-22,-61,-29,-32,]),'END':([2,3,5,6,8,11,12,13,18,28,29,30,31,32,33,34,35,36,37,38,39,46,47,48,49,54,55,56,57,58,61,62,63,64,84,85,86,87,88,89,95,96,97,98,99,100,101,102,105,108,109,110,112,113,114,115,116,117,118,119,120,122,123,124,],[-61,-61,-4,-61,-35,27,-61,-13,-18,-12,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,-41,-42,-46,-50,-61,-61,-61,-10,-11,-53,-61,-61,-7,-34,-61,-3,-36,-5,-6,-40,-43,-44,-45,-47,-48,-49,-51,-2,-61,-61,-33,-23,-25,-26,-28,-61,-31,-19,-22,121,-61,-29,-32,]),'IDENTIFIER':([4,14,15,19,21,22,23,26,50,60,65,66,69,70,71,72,73,74,75,76,77,78,79,80,104,107,111,],[10,34,34,41,34,34,53,10,34,34,34,34,34,-56,-57,-58,-59,-60,34,34,34,34,34,34,34,34,119,]),'RETURN':([7,12,13,18,24,28,29,30,31,32,33,34,35,36,37,38,39,46,47,48,49,61,62,63,64,87,88,89,95,96,97,98,99,100,101,102,108,110,112,113,114,115,118,119,122,123,124,],[-61,-61,-13,-18,54,-12,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,-41,-42,-46,-50,-53,-61,-61,-7,-36,-5,-6,-40,-43,-44,-45,-47,-48,-49,-51,-61,-33,-23,-25,-26,-28,-19,-22,-61,-29,-32,]),'AS':([9,10,59,],[25,-9,-8,]),'COMMA':([10,30,31,32,33,34,35,36,61,62,63,64,88,89,],[26,60,-38,-39,-52,-61,-54,-55,-53,-61,-61,-7,-5,-6,]),'LOOP':([12,13,18,20,28,29,30,31,32,33,34,35,36,37,38,39,42,43,46,47,48,49,61,62,63,64,67,68,87,88,89,94,95,96,97,98,99,100,101,102,108,110,112,113,114,115,118,119,122,123,124,],[-61,-13,-18,-61,-12,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,-61,-24,-41,-42,-46,-50,-53,-61,-61,-7,93,-61,-36,-5,-6,108,-40,-43,-44,-45,-47,-48,-49,-51,-61,-33,-23,-25,-26,-28,-19,-22,-61,-29,-32,]),'ELSE':([12,13,18,28,29,30,31,32,33,34,35,36,37,38,39,46,47,48,49,61,62,63,64,82,87,88,89,95,96,97,98,99,100,101,102,103,108,110,112,113,114,115,118,119,122,123,124,],[-61,-13,-18,-12,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,-41,-42,-46,-50,-53,-61,-61,-7,-61,-36,-5,-6,-40,-43,-44,-45,-47,-48,-49,-51,109,-61,-33,-23,-25,-26,-28,-19,-22,-61,-29,-32,]),'NEXT':([12,13,18,28,29,30,31,32,33,34,35,36,37,38,39,46,47,48,49,61,62,63,64,87,88,89,90,91,95,96,97,98,99,100,101,102,106,108,110,112,113,114,115,118,119,122,123,124,],[-61,-13,-18,-12,-14,-37,-38,-39,-52,-61,-54,-55,-15,-16,-17,-41,-42,-46,-50,-53,-61,-61,-7,-36,-5,-6,-61,-21,-40,-43,-44,-45,-47,-48,-49,-51,111,-61,-33,-23,-25,-26,-28,-19,-22,-61,-29,-32,]),'STRING':([14,15,60,],[31,31,31,]),'INT':([14,15,21,22,50,60,65,66,69,70,71,72,73,74,75,76,77,78,79,80,104,107,],[33,33,33,33,33,33,33,33,33,-56,-57,-58,-59,-60,33,33,33,33,33,33,33,33,]),'FLOAT':([14,15,21,22,50,60,65,66,69,70,71,72,73,74,75,76,77,78,79,80,104,107,],[36,36,36,36,36,36,36,36,36,-56,-57,-58,-59,-60,36,36,36,36,36,36,36,36,]),'OPENPAR':([21,22,50,65,66,69,70,71,72,73,74,75,76,77,78,79,80,104,107,],[50,50,50,50,50,50,-56,-57,-58,-59,-60,50,50,50,50,50,50,50,50,]),'STRING_TYPE':([25,],[56,]),'INT_TYPE':([25,],[57,]),'FLOAT_TYPE':([25,],[58,]),'MULTIPLY':([33,34,35,36,48,49,61,62,63,64,88,89,102,],[-52,-61,-54,-55,78,-50,-53,-61,-61,-7,-5,-6,-51,]),'DIVIDE':([33,34,35,36,48,49,61,62,63,64,88,89,102,],[-52,-61,-54,-55,79,-50,-53,-61,-61,-7,-5,-6,-51,]),'AND':([33,34,35,36,48,49,61,62,63,64,88,89,102,],[-52,-61,-54,-55,80,-50,-53,-61,-61,-7,-5,-6,-51,]),'PLUS':([33,34,35,36,47,48,49,61,62,63,64,88,89,99,100,101,102,],[-52,-61,-54,-55,75,-46,-50,-53,-61,-61,-7,-5,-6,-47,-48,-49,-51,]),'MINUS':([33,34,35,36,47,48,49,61,62,63,64,88,89,99,100,101,102,],[-52,-61,-54,-55,76,-46,-50,-53,-61,-61,-7,-5,-6,-47,-48,-49,-51,]),'OR':([33,34,35,36,47,48,49,61,62,63,64,88,89,99,100,101,102,],[-52,-61,-54,-55,77,-46,-50,-53,-61,-61,-7,-5,-6,-47,-48,-49,-51,]),'LESSTHANOREQUAL':([33,34,35,36,46,47,48,49,61,62,63,64,88,89,96,97,98,99,100,101,102,],[-52,-61,-54,-55,70,-42,-46,-50,-53,-61,-61,-7,-5,-6,-43,-44,-45,-47,-48,-49,-51,]),'GREATERTHANOREQUAL':([33,34,35,36,46,47,48,49,61,62,63,64,88,89,96,97,98,99,100,101,102,],[-52,-61,-54,-55,71,-42,-46,-50,-53,-61,-61,-7,-5,-6,-43,-44,-45,-47,-48,-49,-51,]),'ISEQUALTO':([33,34,35,36,46,47,48,49,61,62,63,64,88,89,96,97,98,99,100,101,102,],[-52,-61,-54,-55,72,-42,-46,-50,-53,-61,-61,-7,-5,-6,-43,-44,-45,-47,-48,-49,-51,]),'GREATERTHAN':([33,34,35,36,46,47,48,49,61,62,63,64,88,89,96,97,98,99,100,101,102,],[-52,-61,-54,-55,73,-42,-46,-50,-53,-61,-61,-7,-5,-6,-43,-44,-45,-47,-48,-49,-51,]),'LESSTHAN':([33,34,35,36,46,47,48,49,61,62,63,64,88,89,96,97,98,99,100,101,102,],[-52,-61,-54,-55,74,-42,-46,-50,-53,-61,-61,-7,-5,-6,-43,-44,-45,-47,-48,-49,-51,]),'THEN':([33,34,35,36,46,47,48,49,51,52,61,62,63,64,88,89,95,96,97,98,99,100,101,102,],[-52,-61,-54,-55,-41,-42,-46,-50,82,-30,-53,-61,-61,-7,-5,-6,-40,-43,-44,-45,-47,-48,-49,-51,]),'CLOSEPAR':([33,34,35,36,46,47,48,49,61,62,63,64,81,88,89,95,96,97,98,99,100,101,102,],[-52,-61,-54,-55,-41,-42,-46,-50,-53,-61,-61,-7,102,-5,-6,-40,-43,-44,-45,-47,-48,-49,-51,]),'TO':([33,34,35,36,40,46,47,48,49,61,62,63,64,88,89,92,95,96,97,98,99,100,101,102,],[-52,-61,-54,-55,65,-41,-42,-46,-50,-53,-61,-61,-7,-5,-6,-20,-40,-43,-44,-45,-47,-48,-49,-51,]),'SIZE':([34,53,55,57,58,62,63,],[62,62,62,-10,-11,62,62,]),'SIZE_ID':([34,53,55,57,58,62,63,],[63,63,63,-10,-11,63,63,]),'EQUALS':([41,53,62,63,64,83,88,89,],[66,-61,-61,-61,-7,104,-5,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'var':([2,56,85,],[3,86,105,]),'empty':([2,3,6,7,12,20,34,42,53,54,55,56,62,63,68,82,85,90,108,109,116,122,],[5,8,13,13,13,43,64,13,64,8,64,5,64,64,13,13,5,13,115,117,13,124,]),'procedure':([3,54,],[6,84,]),'repeated_identifier':([4,26,],[9,59,]),'block':([6,7,12,42,68,82,90,116,],[11,24,28,67,94,103,106,120,]),'statement':([6,7,12,42,68,82,90,116,],[12,12,12,12,12,12,12,12,]),'repeated_print':([14,15,60,],[29,37,87,]),'repeated_elem':([14,15,60,],[30,30,30,]),'elem':([14,15,21,22,50,60,65,66,69,75,76,77,78,79,80,104,107,],[32,32,49,49,49,32,49,49,49,49,49,49,49,49,49,49,49,]),'elem_else':([14,15,21,22,50,60,65,66,69,75,76,77,78,79,80,104,107,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'aux1':([19,],[40,]),'do_while_inicio':([20,],[42,]),'aux_while':([21,],[44,]),'expression':([21,22,50,65,66,104,107,],[45,52,81,91,92,110,113,]),'expression_s':([21,22,50,65,66,69,75,76,77,104,107,],[46,46,46,46,46,95,96,97,98,46,46,]),'term':([21,22,50,65,66,69,75,76,77,78,79,80,104,107,],[47,47,47,47,47,47,47,47,47,99,100,101,47,47,]),'factor':([21,22,50,65,66,69,75,76,77,78,79,80,104,107,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'aux_if':([22,],[51,]),'type':([25,],[55,]),'repeated_size':([34,53,55,62,63,],[61,83,85,88,89,]),'op_rel':([46,],[69,]),'aux2':([65,],[90,]),'aux_do_while':([107,],[112,]),'fin_while':([108,],[114,]),'aux_else':([109,],[116,]),'aux3':([111,],[118,]),'aux_fin':([122,],[123,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM var procedure block END','programa',5,'p_programa','parserules.py',40),
  ('var -> DIM repeated_identifier AS type repeated_size var','var',6,'p_var','parserules.py',46),
  ('var -> DIM repeated_identifier AS STRING_TYPE var','var',5,'p_var','parserules.py',47),
  ('var -> empty','var',1,'p_var','parserules.py',48),
  ('repeated_size -> SIZE repeated_size','repeated_size',2,'p_repeated_size','parserules.py',57),
  ('repeated_size -> SIZE_ID repeated_size','repeated_size',2,'p_repeated_size','parserules.py',58),
  ('repeated_size -> empty','repeated_size',1,'p_repeated_size','parserules.py',59),
  ('repeated_identifier -> IDENTIFIER COMMA repeated_identifier','repeated_identifier',3,'p_repeated_identifier','parserules.py',65),
  ('repeated_identifier -> IDENTIFIER','repeated_identifier',1,'p_repeated_identifier','parserules.py',66),
  ('type -> INT_TYPE','type',1,'p_var_type','parserules.py',82),
  ('type -> FLOAT_TYPE','type',1,'p_var_type','parserules.py',83),
  ('block -> statement block','block',2,'p_block','parserules.py',89),
  ('block -> empty','block',1,'p_block','parserules.py',90),
  ('statement -> INPUT repeated_print','statement',2,'p_statement','parserules.py',96),
  ('statement -> PRINT repeated_print','statement',2,'p_statement','parserules.py',97),
  ('statement -> GOSUB LABEL','statement',2,'p_statement','parserules.py',98),
  ('statement -> GOTO LABEL','statement',2,'p_statement','parserules.py',99),
  ('statement -> LABEL_SALTO','statement',1,'p_statement','parserules.py',100),
  ('statement -> FOR aux1 TO aux2 block NEXT aux3','statement',7,'p_statement_for','parserules.py',108),
  ('aux1 -> IDENTIFIER EQUALS expression','aux1',3,'p_for_aux1','parserules.py',114),
  ('aux2 -> expression','aux2',1,'p_for_aux2','parserules.py',128),
  ('aux3 -> IDENTIFIER','aux3',1,'p_for_aux3','parserules.py',151),
  ('statement -> DO do_while_inicio block LOOP WHILE aux_do_while','statement',6,'p_statement_do_while','parserules.py',171),
  ('do_while_inicio -> empty','do_while_inicio',1,'p_do_while_inicio','parserules.py',177),
  ('aux_do_while -> expression','aux_do_while',1,'p_aux_do_while','parserules.py',187),
  ('statement -> WHILE aux_while DO block LOOP fin_while','statement',6,'p_statement_while','parserules.py',203),
  ('aux_while -> expression','aux_while',1,'p_aux_while','parserules.py',209),
  ('fin_while -> empty','fin_while',1,'p_aux_fin_while','parserules.py',224),
  ('statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin','statement',10,'p_statement_if','parserules.py',242),
  ('aux_if -> expression','aux_if',1,'p_aux_if','parserules.py',248),
  ('aux_else -> empty','aux_else',1,'p_aux_else','parserules.py',259),
  ('aux_fin -> empty','aux_fin',1,'p_aux_if_fin','parserules.py',275),
  ('statement -> LET IDENTIFIER repeated_size EQUALS expression','statement',5,'p_statement_assignment','parserules.py',283),
  ('procedure -> LABEL block RETURN procedure','procedure',4,'p_procedure','parserules.py',294),
  ('procedure -> empty','procedure',1,'p_procedure','parserules.py',295),
  ('repeated_print -> repeated_elem COMMA repeated_print','repeated_print',3,'p_repeated_print','parserules.py',301),
  ('repeated_print -> repeated_elem','repeated_print',1,'p_repeated_print','parserules.py',302),
  ('repeated_elem -> STRING','repeated_elem',1,'p_repeated_elem','parserules.py',308),
  ('repeated_elem -> elem','repeated_elem',1,'p_repeated_elem','parserules.py',309),
  ('expression -> expression_s op_rel expression_s','expression',3,'p_expression','parserules.py',317),
  ('expression -> expression_s','expression',1,'p_expression','parserules.py',318),
  ('expression_s -> term','expression_s',1,'p_expression_s','parserules.py',327),
  ('expression_s -> term PLUS expression_s','expression_s',3,'p_expression_s','parserules.py',328),
  ('expression_s -> term MINUS expression_s','expression_s',3,'p_expression_s','parserules.py',329),
  ('expression_s -> term OR expression_s','expression_s',3,'p_expression_s','parserules.py',330),
  ('term -> factor','term',1,'p_term','parserules.py',339),
  ('term -> factor MULTIPLY term','term',3,'p_term','parserules.py',340),
  ('term -> factor DIVIDE term','term',3,'p_term','parserules.py',341),
  ('term -> factor AND term','term',3,'p_term','parserules.py',342),
  ('factor -> elem','factor',1,'p_factor','parserules.py',351),
  ('factor -> OPENPAR expression CLOSEPAR','factor',3,'p_factor','parserules.py',352),
  ('elem -> INT','elem',1,'p_elem_float','parserules.py',361),
  ('elem -> IDENTIFIER repeated_size','elem',2,'p_elem_float','parserules.py',362),
  ('elem -> elem_else','elem',1,'p_elem_float','parserules.py',363),
  ('elem_else -> FLOAT','elem_else',1,'p_elem','parserules.py',372),
  ('op_rel -> LESSTHANOREQUAL','op_rel',1,'p_op_rel','parserules.py',378),
  ('op_rel -> GREATERTHANOREQUAL','op_rel',1,'p_op_rel','parserules.py',379),
  ('op_rel -> ISEQUALTO','op_rel',1,'p_op_rel','parserules.py',380),
  ('op_rel -> GREATERTHAN','op_rel',1,'p_op_rel','parserules.py',381),
  ('op_rel -> LESSTHAN','op_rel',1,'p_op_rel','parserules.py',382),
  ('empty -> <empty>','empty',0,'p_empty','parserules.py',393),
]
