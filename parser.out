Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM var procedure block END
Rule 2     var -> DIM repeated_identifier AS type repeated_size var
Rule 3     var -> DIM repeated_identifier AS STRING_TYPE var
Rule 4     var -> empty
Rule 5     repeated_size -> SIZE repeated_size
Rule 6     repeated_size -> SIZE_ID repeated_size
Rule 7     repeated_size -> empty
Rule 8     repeated_identifier -> IDENTIFIER COMMA repeated_identifier
Rule 9     repeated_identifier -> IDENTIFIER
Rule 10    type -> INT_TYPE
Rule 11    type -> FLOAT_TYPE
Rule 12    block -> statement block
Rule 13    block -> empty
Rule 14    statement -> INPUT repeated_print
Rule 15    statement -> PRINT repeated_print
Rule 16    statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER
Rule 17    statement -> DO block LOOP WHILE expression
Rule 18    statement -> GOSUB LABEL
Rule 19    statement -> GOTO LABEL
Rule 20    statement -> LABEL_SALTO
Rule 21    statement -> WHILE aux_while DO block LOOP fin_while
Rule 22    aux_while -> expression
Rule 23    fin_while -> empty
Rule 24    statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin
Rule 25    aux_if -> expression
Rule 26    aux_else -> empty
Rule 27    aux_fin -> empty
Rule 28    statement -> LET IDENTIFIER repeated_size EQUALS expression
Rule 29    procedure -> LABEL block RETURN procedure
Rule 30    procedure -> empty
Rule 31    repeated_print -> repeated_elem COMMA repeated_print
Rule 32    repeated_print -> repeated_elem
Rule 33    repeated_elem -> STRING
Rule 34    repeated_elem -> elem
Rule 35    expression -> expression_s op_rel expression_s
Rule 36    expression -> expression_s
Rule 37    expression_s -> term
Rule 38    expression_s -> term PLUS expression_s
Rule 39    expression_s -> term MINUS expression_s
Rule 40    expression_s -> term OR expression_s
Rule 41    term -> factor
Rule 42    term -> factor MULTIPLY term
Rule 43    term -> factor DIVIDE term
Rule 44    term -> factor AND term
Rule 45    factor -> elem
Rule 46    factor -> OPENPAR expression CLOSEPAR
Rule 47    elem -> INT
Rule 48    elem -> IDENTIFIER repeated_size
Rule 49    elem -> elem_else
Rule 50    elem_else -> FLOAT
Rule 51    op_rel -> LESSTHAN
Rule 52    op_rel -> GREATERTHAN
Rule 53    op_rel -> ISEQUALTO
Rule 54    empty -> <empty>

Terminals, with rules where they appear

AND                  : 44
AS                   : 2 3
CLOSEPAR             : 46
COMMA                : 8 31
DIM                  : 2 3
DIVIDE               : 43
DO                   : 17 21
ELSE                 : 24
END                  : 1 24
EQUALS               : 16 28
FLOAT                : 50
FLOAT_TYPE           : 11
FOR                  : 16
GOSUB                : 18
GOTO                 : 19
GREATERTHAN          : 52
IDENTIFIER           : 8 9 16 16 28 48
IF                   : 24 24
INPUT                : 14
INT                  : 16 16 47
INT_TYPE             : 10
ISEQUALTO            : 53
LABEL                : 18 19 29
LABEL_SALTO          : 20
LESSTHAN             : 51
LET                  : 28
LOOP                 : 17 21
MINUS                : 39
MULTIPLY             : 42
NEXT                 : 16
OPENPAR              : 46
OR                   : 40
PLUS                 : 38
PRINT                : 15
PROGRAM              : 1
RETURN               : 29
SIZE                 : 5
SIZE_ID              : 6
STRING               : 33
STRING_TYPE          : 3
THEN                 : 24
TO                   : 16
WHILE                : 17 21
error                : 

Nonterminals, with rules where they appear

aux_else             : 24
aux_fin              : 24
aux_if               : 24
aux_while            : 21
block                : 1 12 16 17 21 24 24 29
elem                 : 34 45
elem_else            : 49
empty                : 4 7 13 23 26 27 30
expression           : 17 22 25 28 46
expression_s         : 35 35 36 38 39 40
factor               : 41 42 43 44
fin_while            : 21
op_rel               : 35
procedure            : 1 29
programa             : 0
repeated_elem        : 31 32
repeated_identifier  : 2 3 8
repeated_print       : 14 15 31
repeated_size        : 2 5 6 28 48
statement            : 12
term                 : 37 38 39 40 42 43 44
type                 : 2
var                  : 1 2 3

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM var procedure block END

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . var procedure block END
    (2) var -> . DIM repeated_identifier AS type repeated_size var
    (3) var -> . DIM repeated_identifier AS STRING_TYPE var
    (4) var -> . empty
    (54) empty -> .

    DIM             shift and go to state 4
    LABEL           reduce using rule 54 (empty -> .)
    INPUT           reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    FOR             reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    GOSUB           reduce using rule 54 (empty -> .)
    GOTO            reduce using rule 54 (empty -> .)
    LABEL_SALTO     reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    LET             reduce using rule 54 (empty -> .)
    END             reduce using rule 54 (empty -> .)

    var                            shift and go to state 3
    empty                          shift and go to state 5

state 3

    (1) programa -> PROGRAM var . procedure block END
    (29) procedure -> . LABEL block RETURN procedure
    (30) procedure -> . empty
    (54) empty -> .

    LABEL           shift and go to state 7
    INPUT           reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    FOR             reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    GOSUB           reduce using rule 54 (empty -> .)
    GOTO            reduce using rule 54 (empty -> .)
    LABEL_SALTO     reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    LET             reduce using rule 54 (empty -> .)
    END             reduce using rule 54 (empty -> .)

    procedure                      shift and go to state 6
    empty                          shift and go to state 8

state 4

    (2) var -> DIM . repeated_identifier AS type repeated_size var
    (3) var -> DIM . repeated_identifier AS STRING_TYPE var
    (8) repeated_identifier -> . IDENTIFIER COMMA repeated_identifier
    (9) repeated_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 10

    repeated_identifier            shift and go to state 9

state 5

    (4) var -> empty .

    LABEL           reduce using rule 4 (var -> empty .)
    INPUT           reduce using rule 4 (var -> empty .)
    PRINT           reduce using rule 4 (var -> empty .)
    FOR             reduce using rule 4 (var -> empty .)
    DO              reduce using rule 4 (var -> empty .)
    GOSUB           reduce using rule 4 (var -> empty .)
    GOTO            reduce using rule 4 (var -> empty .)
    LABEL_SALTO     reduce using rule 4 (var -> empty .)
    WHILE           reduce using rule 4 (var -> empty .)
    IF              reduce using rule 4 (var -> empty .)
    LET             reduce using rule 4 (var -> empty .)
    END             reduce using rule 4 (var -> empty .)


state 6

    (1) programa -> PROGRAM var procedure . block END
    (12) block -> . statement block
    (13) block -> . empty
    (14) statement -> . INPUT repeated_print
    (15) statement -> . PRINT repeated_print
    (16) statement -> . FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER
    (17) statement -> . DO block LOOP WHILE expression
    (18) statement -> . GOSUB LABEL
    (19) statement -> . GOTO LABEL
    (20) statement -> . LABEL_SALTO
    (21) statement -> . WHILE aux_while DO block LOOP fin_while
    (24) statement -> . IF aux_if THEN block ELSE aux_else block END IF aux_fin
    (28) statement -> . LET IDENTIFIER repeated_size EQUALS expression
    (54) empty -> .

    INPUT           shift and go to state 14
    PRINT           shift and go to state 15
    FOR             shift and go to state 16
    DO              shift and go to state 17
    GOSUB           shift and go to state 19
    GOTO            shift and go to state 20
    LABEL_SALTO     shift and go to state 21
    WHILE           shift and go to state 18
    IF              shift and go to state 22
    LET             shift and go to state 23
    END             reduce using rule 54 (empty -> .)

    block                          shift and go to state 11
    statement                      shift and go to state 12
    empty                          shift and go to state 13

state 7

    (29) procedure -> LABEL . block RETURN procedure
    (12) block -> . statement block
    (13) block -> . empty
    (14) statement -> . INPUT repeated_print
    (15) statement -> . PRINT repeated_print
    (16) statement -> . FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER
    (17) statement -> . DO block LOOP WHILE expression
    (18) statement -> . GOSUB LABEL
    (19) statement -> . GOTO LABEL
    (20) statement -> . LABEL_SALTO
    (21) statement -> . WHILE aux_while DO block LOOP fin_while
    (24) statement -> . IF aux_if THEN block ELSE aux_else block END IF aux_fin
    (28) statement -> . LET IDENTIFIER repeated_size EQUALS expression
    (54) empty -> .

    INPUT           shift and go to state 14
    PRINT           shift and go to state 15
    FOR             shift and go to state 16
    DO              shift and go to state 17
    GOSUB           shift and go to state 19
    GOTO            shift and go to state 20
    LABEL_SALTO     shift and go to state 21
    WHILE           shift and go to state 18
    IF              shift and go to state 22
    LET             shift and go to state 23
    RETURN          reduce using rule 54 (empty -> .)

    block                          shift and go to state 24
    statement                      shift and go to state 12
    empty                          shift and go to state 13

state 8

    (30) procedure -> empty .

    INPUT           reduce using rule 30 (procedure -> empty .)
    PRINT           reduce using rule 30 (procedure -> empty .)
    FOR             reduce using rule 30 (procedure -> empty .)
    DO              reduce using rule 30 (procedure -> empty .)
    GOSUB           reduce using rule 30 (procedure -> empty .)
    GOTO            reduce using rule 30 (procedure -> empty .)
    LABEL_SALTO     reduce using rule 30 (procedure -> empty .)
    WHILE           reduce using rule 30 (procedure -> empty .)
    IF              reduce using rule 30 (procedure -> empty .)
    LET             reduce using rule 30 (procedure -> empty .)
    END             reduce using rule 30 (procedure -> empty .)


state 9

    (2) var -> DIM repeated_identifier . AS type repeated_size var
    (3) var -> DIM repeated_identifier . AS STRING_TYPE var

    AS              shift and go to state 25


state 10

    (8) repeated_identifier -> IDENTIFIER . COMMA repeated_identifier
    (9) repeated_identifier -> IDENTIFIER .

    COMMA           shift and go to state 26
    AS              reduce using rule 9 (repeated_identifier -> IDENTIFIER .)


state 11

    (1) programa -> PROGRAM var procedure block . END

    END             shift and go to state 27


state 12

    (12) block -> statement . block
    (12) block -> . statement block
    (13) block -> . empty
    (14) statement -> . INPUT repeated_print
    (15) statement -> . PRINT repeated_print
    (16) statement -> . FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER
    (17) statement -> . DO block LOOP WHILE expression
    (18) statement -> . GOSUB LABEL
    (19) statement -> . GOTO LABEL
    (20) statement -> . LABEL_SALTO
    (21) statement -> . WHILE aux_while DO block LOOP fin_while
    (24) statement -> . IF aux_if THEN block ELSE aux_else block END IF aux_fin
    (28) statement -> . LET IDENTIFIER repeated_size EQUALS expression
    (54) empty -> .

    INPUT           shift and go to state 14
    PRINT           shift and go to state 15
    FOR             shift and go to state 16
    DO              shift and go to state 17
    GOSUB           shift and go to state 19
    GOTO            shift and go to state 20
    LABEL_SALTO     shift and go to state 21
    WHILE           shift and go to state 18
    IF              shift and go to state 22
    LET             shift and go to state 23
    END             reduce using rule 54 (empty -> .)
    RETURN          reduce using rule 54 (empty -> .)
    LOOP            reduce using rule 54 (empty -> .)
    ELSE            reduce using rule 54 (empty -> .)
    NEXT            reduce using rule 54 (empty -> .)

    statement                      shift and go to state 12
    block                          shift and go to state 28
    empty                          shift and go to state 13

state 13

    (13) block -> empty .

    END             reduce using rule 13 (block -> empty .)
    RETURN          reduce using rule 13 (block -> empty .)
    LOOP            reduce using rule 13 (block -> empty .)
    ELSE            reduce using rule 13 (block -> empty .)
    NEXT            reduce using rule 13 (block -> empty .)


state 14

    (14) statement -> INPUT . repeated_print
    (31) repeated_print -> . repeated_elem COMMA repeated_print
    (32) repeated_print -> . repeated_elem
    (33) repeated_elem -> . STRING
    (34) repeated_elem -> . elem
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    STRING          shift and go to state 31
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    repeated_print                 shift and go to state 29
    repeated_elem                  shift and go to state 30
    elem                           shift and go to state 32
    elem_else                      shift and go to state 35

state 15

    (15) statement -> PRINT . repeated_print
    (31) repeated_print -> . repeated_elem COMMA repeated_print
    (32) repeated_print -> . repeated_elem
    (33) repeated_elem -> . STRING
    (34) repeated_elem -> . elem
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    STRING          shift and go to state 31
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    repeated_print                 shift and go to state 37
    repeated_elem                  shift and go to state 30
    elem                           shift and go to state 32
    elem_else                      shift and go to state 35

state 16

    (16) statement -> FOR . IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER

    IDENTIFIER      shift and go to state 38


state 17

    (17) statement -> DO . block LOOP WHILE expression
    (12) block -> . statement block
    (13) block -> . empty
    (14) statement -> . INPUT repeated_print
    (15) statement -> . PRINT repeated_print
    (16) statement -> . FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER
    (17) statement -> . DO block LOOP WHILE expression
    (18) statement -> . GOSUB LABEL
    (19) statement -> . GOTO LABEL
    (20) statement -> . LABEL_SALTO
    (21) statement -> . WHILE aux_while DO block LOOP fin_while
    (24) statement -> . IF aux_if THEN block ELSE aux_else block END IF aux_fin
    (28) statement -> . LET IDENTIFIER repeated_size EQUALS expression
    (54) empty -> .

    INPUT           shift and go to state 14
    PRINT           shift and go to state 15
    FOR             shift and go to state 16
    DO              shift and go to state 17
    GOSUB           shift and go to state 19
    GOTO            shift and go to state 20
    LABEL_SALTO     shift and go to state 21
    WHILE           shift and go to state 18
    IF              shift and go to state 22
    LET             shift and go to state 23
    LOOP            reduce using rule 54 (empty -> .)

    block                          shift and go to state 39
    statement                      shift and go to state 12
    empty                          shift and go to state 13

state 18

    (21) statement -> WHILE . aux_while DO block LOOP fin_while
    (22) aux_while -> . expression
    (35) expression -> . expression_s op_rel expression_s
    (36) expression -> . expression_s
    (37) expression_s -> . term
    (38) expression_s -> . term PLUS expression_s
    (39) expression_s -> . term MINUS expression_s
    (40) expression_s -> . term OR expression_s
    (41) term -> . factor
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor AND term
    (45) factor -> . elem
    (46) factor -> . OPENPAR expression CLOSEPAR
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    OPENPAR         shift and go to state 46
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    aux_while                      shift and go to state 40
    expression                     shift and go to state 41
    expression_s                   shift and go to state 42
    term                           shift and go to state 43
    factor                         shift and go to state 44
    elem                           shift and go to state 45
    elem_else                      shift and go to state 35

state 19

    (18) statement -> GOSUB . LABEL

    LABEL           shift and go to state 47


state 20

    (19) statement -> GOTO . LABEL

    LABEL           shift and go to state 48


state 21

    (20) statement -> LABEL_SALTO .

    INPUT           reduce using rule 20 (statement -> LABEL_SALTO .)
    PRINT           reduce using rule 20 (statement -> LABEL_SALTO .)
    FOR             reduce using rule 20 (statement -> LABEL_SALTO .)
    DO              reduce using rule 20 (statement -> LABEL_SALTO .)
    GOSUB           reduce using rule 20 (statement -> LABEL_SALTO .)
    GOTO            reduce using rule 20 (statement -> LABEL_SALTO .)
    LABEL_SALTO     reduce using rule 20 (statement -> LABEL_SALTO .)
    WHILE           reduce using rule 20 (statement -> LABEL_SALTO .)
    IF              reduce using rule 20 (statement -> LABEL_SALTO .)
    LET             reduce using rule 20 (statement -> LABEL_SALTO .)
    END             reduce using rule 20 (statement -> LABEL_SALTO .)
    RETURN          reduce using rule 20 (statement -> LABEL_SALTO .)
    LOOP            reduce using rule 20 (statement -> LABEL_SALTO .)
    ELSE            reduce using rule 20 (statement -> LABEL_SALTO .)
    NEXT            reduce using rule 20 (statement -> LABEL_SALTO .)


state 22

    (24) statement -> IF . aux_if THEN block ELSE aux_else block END IF aux_fin
    (25) aux_if -> . expression
    (35) expression -> . expression_s op_rel expression_s
    (36) expression -> . expression_s
    (37) expression_s -> . term
    (38) expression_s -> . term PLUS expression_s
    (39) expression_s -> . term MINUS expression_s
    (40) expression_s -> . term OR expression_s
    (41) term -> . factor
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor AND term
    (45) factor -> . elem
    (46) factor -> . OPENPAR expression CLOSEPAR
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    OPENPAR         shift and go to state 46
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    aux_if                         shift and go to state 49
    expression                     shift and go to state 50
    expression_s                   shift and go to state 42
    term                           shift and go to state 43
    factor                         shift and go to state 44
    elem                           shift and go to state 45
    elem_else                      shift and go to state 35

state 23

    (28) statement -> LET . IDENTIFIER repeated_size EQUALS expression

    IDENTIFIER      shift and go to state 51


state 24

    (29) procedure -> LABEL block . RETURN procedure

    RETURN          shift and go to state 52


state 25

    (2) var -> DIM repeated_identifier AS . type repeated_size var
    (3) var -> DIM repeated_identifier AS . STRING_TYPE var
    (10) type -> . INT_TYPE
    (11) type -> . FLOAT_TYPE

    STRING_TYPE     shift and go to state 54
    INT_TYPE        shift and go to state 55
    FLOAT_TYPE      shift and go to state 56

    type                           shift and go to state 53

state 26

    (8) repeated_identifier -> IDENTIFIER COMMA . repeated_identifier
    (8) repeated_identifier -> . IDENTIFIER COMMA repeated_identifier
    (9) repeated_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 10

    repeated_identifier            shift and go to state 57

state 27

    (1) programa -> PROGRAM var procedure block END .

    $end            reduce using rule 1 (programa -> PROGRAM var procedure block END .)


state 28

    (12) block -> statement block .

    END             reduce using rule 12 (block -> statement block .)
    RETURN          reduce using rule 12 (block -> statement block .)
    LOOP            reduce using rule 12 (block -> statement block .)
    ELSE            reduce using rule 12 (block -> statement block .)
    NEXT            reduce using rule 12 (block -> statement block .)


state 29

    (14) statement -> INPUT repeated_print .

    INPUT           reduce using rule 14 (statement -> INPUT repeated_print .)
    PRINT           reduce using rule 14 (statement -> INPUT repeated_print .)
    FOR             reduce using rule 14 (statement -> INPUT repeated_print .)
    DO              reduce using rule 14 (statement -> INPUT repeated_print .)
    GOSUB           reduce using rule 14 (statement -> INPUT repeated_print .)
    GOTO            reduce using rule 14 (statement -> INPUT repeated_print .)
    LABEL_SALTO     reduce using rule 14 (statement -> INPUT repeated_print .)
    WHILE           reduce using rule 14 (statement -> INPUT repeated_print .)
    IF              reduce using rule 14 (statement -> INPUT repeated_print .)
    LET             reduce using rule 14 (statement -> INPUT repeated_print .)
    END             reduce using rule 14 (statement -> INPUT repeated_print .)
    RETURN          reduce using rule 14 (statement -> INPUT repeated_print .)
    LOOP            reduce using rule 14 (statement -> INPUT repeated_print .)
    ELSE            reduce using rule 14 (statement -> INPUT repeated_print .)
    NEXT            reduce using rule 14 (statement -> INPUT repeated_print .)


state 30

    (31) repeated_print -> repeated_elem . COMMA repeated_print
    (32) repeated_print -> repeated_elem .

    COMMA           shift and go to state 58
    INPUT           reduce using rule 32 (repeated_print -> repeated_elem .)
    PRINT           reduce using rule 32 (repeated_print -> repeated_elem .)
    FOR             reduce using rule 32 (repeated_print -> repeated_elem .)
    DO              reduce using rule 32 (repeated_print -> repeated_elem .)
    GOSUB           reduce using rule 32 (repeated_print -> repeated_elem .)
    GOTO            reduce using rule 32 (repeated_print -> repeated_elem .)
    LABEL_SALTO     reduce using rule 32 (repeated_print -> repeated_elem .)
    WHILE           reduce using rule 32 (repeated_print -> repeated_elem .)
    IF              reduce using rule 32 (repeated_print -> repeated_elem .)
    LET             reduce using rule 32 (repeated_print -> repeated_elem .)
    END             reduce using rule 32 (repeated_print -> repeated_elem .)
    RETURN          reduce using rule 32 (repeated_print -> repeated_elem .)
    LOOP            reduce using rule 32 (repeated_print -> repeated_elem .)
    ELSE            reduce using rule 32 (repeated_print -> repeated_elem .)
    NEXT            reduce using rule 32 (repeated_print -> repeated_elem .)


state 31

    (33) repeated_elem -> STRING .

    COMMA           reduce using rule 33 (repeated_elem -> STRING .)
    INPUT           reduce using rule 33 (repeated_elem -> STRING .)
    PRINT           reduce using rule 33 (repeated_elem -> STRING .)
    FOR             reduce using rule 33 (repeated_elem -> STRING .)
    DO              reduce using rule 33 (repeated_elem -> STRING .)
    GOSUB           reduce using rule 33 (repeated_elem -> STRING .)
    GOTO            reduce using rule 33 (repeated_elem -> STRING .)
    LABEL_SALTO     reduce using rule 33 (repeated_elem -> STRING .)
    WHILE           reduce using rule 33 (repeated_elem -> STRING .)
    IF              reduce using rule 33 (repeated_elem -> STRING .)
    LET             reduce using rule 33 (repeated_elem -> STRING .)
    END             reduce using rule 33 (repeated_elem -> STRING .)
    RETURN          reduce using rule 33 (repeated_elem -> STRING .)
    LOOP            reduce using rule 33 (repeated_elem -> STRING .)
    ELSE            reduce using rule 33 (repeated_elem -> STRING .)
    NEXT            reduce using rule 33 (repeated_elem -> STRING .)


state 32

    (34) repeated_elem -> elem .

    COMMA           reduce using rule 34 (repeated_elem -> elem .)
    INPUT           reduce using rule 34 (repeated_elem -> elem .)
    PRINT           reduce using rule 34 (repeated_elem -> elem .)
    FOR             reduce using rule 34 (repeated_elem -> elem .)
    DO              reduce using rule 34 (repeated_elem -> elem .)
    GOSUB           reduce using rule 34 (repeated_elem -> elem .)
    GOTO            reduce using rule 34 (repeated_elem -> elem .)
    LABEL_SALTO     reduce using rule 34 (repeated_elem -> elem .)
    WHILE           reduce using rule 34 (repeated_elem -> elem .)
    IF              reduce using rule 34 (repeated_elem -> elem .)
    LET             reduce using rule 34 (repeated_elem -> elem .)
    END             reduce using rule 34 (repeated_elem -> elem .)
    RETURN          reduce using rule 34 (repeated_elem -> elem .)
    LOOP            reduce using rule 34 (repeated_elem -> elem .)
    ELSE            reduce using rule 34 (repeated_elem -> elem .)
    NEXT            reduce using rule 34 (repeated_elem -> elem .)


state 33

    (47) elem -> INT .

    COMMA           reduce using rule 47 (elem -> INT .)
    INPUT           reduce using rule 47 (elem -> INT .)
    PRINT           reduce using rule 47 (elem -> INT .)
    FOR             reduce using rule 47 (elem -> INT .)
    DO              reduce using rule 47 (elem -> INT .)
    GOSUB           reduce using rule 47 (elem -> INT .)
    GOTO            reduce using rule 47 (elem -> INT .)
    LABEL_SALTO     reduce using rule 47 (elem -> INT .)
    WHILE           reduce using rule 47 (elem -> INT .)
    IF              reduce using rule 47 (elem -> INT .)
    LET             reduce using rule 47 (elem -> INT .)
    END             reduce using rule 47 (elem -> INT .)
    RETURN          reduce using rule 47 (elem -> INT .)
    LOOP            reduce using rule 47 (elem -> INT .)
    ELSE            reduce using rule 47 (elem -> INT .)
    NEXT            reduce using rule 47 (elem -> INT .)
    MULTIPLY        reduce using rule 47 (elem -> INT .)
    DIVIDE          reduce using rule 47 (elem -> INT .)
    AND             reduce using rule 47 (elem -> INT .)
    PLUS            reduce using rule 47 (elem -> INT .)
    MINUS           reduce using rule 47 (elem -> INT .)
    OR              reduce using rule 47 (elem -> INT .)
    LESSTHAN        reduce using rule 47 (elem -> INT .)
    GREATERTHAN     reduce using rule 47 (elem -> INT .)
    ISEQUALTO       reduce using rule 47 (elem -> INT .)
    THEN            reduce using rule 47 (elem -> INT .)
    CLOSEPAR        reduce using rule 47 (elem -> INT .)


state 34

    (48) elem -> IDENTIFIER . repeated_size
    (5) repeated_size -> . SIZE repeated_size
    (6) repeated_size -> . SIZE_ID repeated_size
    (7) repeated_size -> . empty
    (54) empty -> .

    SIZE            shift and go to state 60
    SIZE_ID         shift and go to state 61
    COMMA           reduce using rule 54 (empty -> .)
    INPUT           reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    FOR             reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    GOSUB           reduce using rule 54 (empty -> .)
    GOTO            reduce using rule 54 (empty -> .)
    LABEL_SALTO     reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    LET             reduce using rule 54 (empty -> .)
    END             reduce using rule 54 (empty -> .)
    RETURN          reduce using rule 54 (empty -> .)
    LOOP            reduce using rule 54 (empty -> .)
    ELSE            reduce using rule 54 (empty -> .)
    NEXT            reduce using rule 54 (empty -> .)
    MULTIPLY        reduce using rule 54 (empty -> .)
    DIVIDE          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    PLUS            reduce using rule 54 (empty -> .)
    MINUS           reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    LESSTHAN        reduce using rule 54 (empty -> .)
    GREATERTHAN     reduce using rule 54 (empty -> .)
    ISEQUALTO       reduce using rule 54 (empty -> .)
    THEN            reduce using rule 54 (empty -> .)
    CLOSEPAR        reduce using rule 54 (empty -> .)

    repeated_size                  shift and go to state 59
    empty                          shift and go to state 62

state 35

    (49) elem -> elem_else .

    COMMA           reduce using rule 49 (elem -> elem_else .)
    INPUT           reduce using rule 49 (elem -> elem_else .)
    PRINT           reduce using rule 49 (elem -> elem_else .)
    FOR             reduce using rule 49 (elem -> elem_else .)
    DO              reduce using rule 49 (elem -> elem_else .)
    GOSUB           reduce using rule 49 (elem -> elem_else .)
    GOTO            reduce using rule 49 (elem -> elem_else .)
    LABEL_SALTO     reduce using rule 49 (elem -> elem_else .)
    WHILE           reduce using rule 49 (elem -> elem_else .)
    IF              reduce using rule 49 (elem -> elem_else .)
    LET             reduce using rule 49 (elem -> elem_else .)
    END             reduce using rule 49 (elem -> elem_else .)
    RETURN          reduce using rule 49 (elem -> elem_else .)
    LOOP            reduce using rule 49 (elem -> elem_else .)
    ELSE            reduce using rule 49 (elem -> elem_else .)
    NEXT            reduce using rule 49 (elem -> elem_else .)
    MULTIPLY        reduce using rule 49 (elem -> elem_else .)
    DIVIDE          reduce using rule 49 (elem -> elem_else .)
    AND             reduce using rule 49 (elem -> elem_else .)
    PLUS            reduce using rule 49 (elem -> elem_else .)
    MINUS           reduce using rule 49 (elem -> elem_else .)
    OR              reduce using rule 49 (elem -> elem_else .)
    LESSTHAN        reduce using rule 49 (elem -> elem_else .)
    GREATERTHAN     reduce using rule 49 (elem -> elem_else .)
    ISEQUALTO       reduce using rule 49 (elem -> elem_else .)
    THEN            reduce using rule 49 (elem -> elem_else .)
    CLOSEPAR        reduce using rule 49 (elem -> elem_else .)


state 36

    (50) elem_else -> FLOAT .

    COMMA           reduce using rule 50 (elem_else -> FLOAT .)
    INPUT           reduce using rule 50 (elem_else -> FLOAT .)
    PRINT           reduce using rule 50 (elem_else -> FLOAT .)
    FOR             reduce using rule 50 (elem_else -> FLOAT .)
    DO              reduce using rule 50 (elem_else -> FLOAT .)
    GOSUB           reduce using rule 50 (elem_else -> FLOAT .)
    GOTO            reduce using rule 50 (elem_else -> FLOAT .)
    LABEL_SALTO     reduce using rule 50 (elem_else -> FLOAT .)
    WHILE           reduce using rule 50 (elem_else -> FLOAT .)
    IF              reduce using rule 50 (elem_else -> FLOAT .)
    LET             reduce using rule 50 (elem_else -> FLOAT .)
    END             reduce using rule 50 (elem_else -> FLOAT .)
    RETURN          reduce using rule 50 (elem_else -> FLOAT .)
    LOOP            reduce using rule 50 (elem_else -> FLOAT .)
    ELSE            reduce using rule 50 (elem_else -> FLOAT .)
    NEXT            reduce using rule 50 (elem_else -> FLOAT .)
    MULTIPLY        reduce using rule 50 (elem_else -> FLOAT .)
    DIVIDE          reduce using rule 50 (elem_else -> FLOAT .)
    AND             reduce using rule 50 (elem_else -> FLOAT .)
    PLUS            reduce using rule 50 (elem_else -> FLOAT .)
    MINUS           reduce using rule 50 (elem_else -> FLOAT .)
    OR              reduce using rule 50 (elem_else -> FLOAT .)
    LESSTHAN        reduce using rule 50 (elem_else -> FLOAT .)
    GREATERTHAN     reduce using rule 50 (elem_else -> FLOAT .)
    ISEQUALTO       reduce using rule 50 (elem_else -> FLOAT .)
    THEN            reduce using rule 50 (elem_else -> FLOAT .)
    CLOSEPAR        reduce using rule 50 (elem_else -> FLOAT .)


state 37

    (15) statement -> PRINT repeated_print .

    INPUT           reduce using rule 15 (statement -> PRINT repeated_print .)
    PRINT           reduce using rule 15 (statement -> PRINT repeated_print .)
    FOR             reduce using rule 15 (statement -> PRINT repeated_print .)
    DO              reduce using rule 15 (statement -> PRINT repeated_print .)
    GOSUB           reduce using rule 15 (statement -> PRINT repeated_print .)
    GOTO            reduce using rule 15 (statement -> PRINT repeated_print .)
    LABEL_SALTO     reduce using rule 15 (statement -> PRINT repeated_print .)
    WHILE           reduce using rule 15 (statement -> PRINT repeated_print .)
    IF              reduce using rule 15 (statement -> PRINT repeated_print .)
    LET             reduce using rule 15 (statement -> PRINT repeated_print .)
    END             reduce using rule 15 (statement -> PRINT repeated_print .)
    RETURN          reduce using rule 15 (statement -> PRINT repeated_print .)
    LOOP            reduce using rule 15 (statement -> PRINT repeated_print .)
    ELSE            reduce using rule 15 (statement -> PRINT repeated_print .)
    NEXT            reduce using rule 15 (statement -> PRINT repeated_print .)


state 38

    (16) statement -> FOR IDENTIFIER . EQUALS INT TO INT block NEXT IDENTIFIER

    EQUALS          shift and go to state 63


state 39

    (17) statement -> DO block . LOOP WHILE expression

    LOOP            shift and go to state 64


state 40

    (21) statement -> WHILE aux_while . DO block LOOP fin_while

    DO              shift and go to state 65


state 41

    (22) aux_while -> expression .

    DO              reduce using rule 22 (aux_while -> expression .)


state 42

    (35) expression -> expression_s . op_rel expression_s
    (36) expression -> expression_s .
    (51) op_rel -> . LESSTHAN
    (52) op_rel -> . GREATERTHAN
    (53) op_rel -> . ISEQUALTO

    DO              reduce using rule 36 (expression -> expression_s .)
    THEN            reduce using rule 36 (expression -> expression_s .)
    CLOSEPAR        reduce using rule 36 (expression -> expression_s .)
    INPUT           reduce using rule 36 (expression -> expression_s .)
    PRINT           reduce using rule 36 (expression -> expression_s .)
    FOR             reduce using rule 36 (expression -> expression_s .)
    GOSUB           reduce using rule 36 (expression -> expression_s .)
    GOTO            reduce using rule 36 (expression -> expression_s .)
    LABEL_SALTO     reduce using rule 36 (expression -> expression_s .)
    WHILE           reduce using rule 36 (expression -> expression_s .)
    IF              reduce using rule 36 (expression -> expression_s .)
    LET             reduce using rule 36 (expression -> expression_s .)
    END             reduce using rule 36 (expression -> expression_s .)
    RETURN          reduce using rule 36 (expression -> expression_s .)
    LOOP            reduce using rule 36 (expression -> expression_s .)
    ELSE            reduce using rule 36 (expression -> expression_s .)
    NEXT            reduce using rule 36 (expression -> expression_s .)
    LESSTHAN        shift and go to state 67
    GREATERTHAN     shift and go to state 68
    ISEQUALTO       shift and go to state 69

    op_rel                         shift and go to state 66

state 43

    (37) expression_s -> term .
    (38) expression_s -> term . PLUS expression_s
    (39) expression_s -> term . MINUS expression_s
    (40) expression_s -> term . OR expression_s

    LESSTHAN        reduce using rule 37 (expression_s -> term .)
    GREATERTHAN     reduce using rule 37 (expression_s -> term .)
    ISEQUALTO       reduce using rule 37 (expression_s -> term .)
    DO              reduce using rule 37 (expression_s -> term .)
    THEN            reduce using rule 37 (expression_s -> term .)
    CLOSEPAR        reduce using rule 37 (expression_s -> term .)
    INPUT           reduce using rule 37 (expression_s -> term .)
    PRINT           reduce using rule 37 (expression_s -> term .)
    FOR             reduce using rule 37 (expression_s -> term .)
    GOSUB           reduce using rule 37 (expression_s -> term .)
    GOTO            reduce using rule 37 (expression_s -> term .)
    LABEL_SALTO     reduce using rule 37 (expression_s -> term .)
    WHILE           reduce using rule 37 (expression_s -> term .)
    IF              reduce using rule 37 (expression_s -> term .)
    LET             reduce using rule 37 (expression_s -> term .)
    END             reduce using rule 37 (expression_s -> term .)
    RETURN          reduce using rule 37 (expression_s -> term .)
    LOOP            reduce using rule 37 (expression_s -> term .)
    ELSE            reduce using rule 37 (expression_s -> term .)
    NEXT            reduce using rule 37 (expression_s -> term .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    OR              shift and go to state 72


state 44

    (41) term -> factor .
    (42) term -> factor . MULTIPLY term
    (43) term -> factor . DIVIDE term
    (44) term -> factor . AND term

    PLUS            reduce using rule 41 (term -> factor .)
    MINUS           reduce using rule 41 (term -> factor .)
    OR              reduce using rule 41 (term -> factor .)
    LESSTHAN        reduce using rule 41 (term -> factor .)
    GREATERTHAN     reduce using rule 41 (term -> factor .)
    ISEQUALTO       reduce using rule 41 (term -> factor .)
    DO              reduce using rule 41 (term -> factor .)
    THEN            reduce using rule 41 (term -> factor .)
    CLOSEPAR        reduce using rule 41 (term -> factor .)
    INPUT           reduce using rule 41 (term -> factor .)
    PRINT           reduce using rule 41 (term -> factor .)
    FOR             reduce using rule 41 (term -> factor .)
    GOSUB           reduce using rule 41 (term -> factor .)
    GOTO            reduce using rule 41 (term -> factor .)
    LABEL_SALTO     reduce using rule 41 (term -> factor .)
    WHILE           reduce using rule 41 (term -> factor .)
    IF              reduce using rule 41 (term -> factor .)
    LET             reduce using rule 41 (term -> factor .)
    END             reduce using rule 41 (term -> factor .)
    RETURN          reduce using rule 41 (term -> factor .)
    LOOP            reduce using rule 41 (term -> factor .)
    ELSE            reduce using rule 41 (term -> factor .)
    NEXT            reduce using rule 41 (term -> factor .)
    MULTIPLY        shift and go to state 73
    DIVIDE          shift and go to state 74
    AND             shift and go to state 75


state 45

    (45) factor -> elem .

    MULTIPLY        reduce using rule 45 (factor -> elem .)
    DIVIDE          reduce using rule 45 (factor -> elem .)
    AND             reduce using rule 45 (factor -> elem .)
    PLUS            reduce using rule 45 (factor -> elem .)
    MINUS           reduce using rule 45 (factor -> elem .)
    OR              reduce using rule 45 (factor -> elem .)
    LESSTHAN        reduce using rule 45 (factor -> elem .)
    GREATERTHAN     reduce using rule 45 (factor -> elem .)
    ISEQUALTO       reduce using rule 45 (factor -> elem .)
    DO              reduce using rule 45 (factor -> elem .)
    THEN            reduce using rule 45 (factor -> elem .)
    CLOSEPAR        reduce using rule 45 (factor -> elem .)
    INPUT           reduce using rule 45 (factor -> elem .)
    PRINT           reduce using rule 45 (factor -> elem .)
    FOR             reduce using rule 45 (factor -> elem .)
    GOSUB           reduce using rule 45 (factor -> elem .)
    GOTO            reduce using rule 45 (factor -> elem .)
    LABEL_SALTO     reduce using rule 45 (factor -> elem .)
    WHILE           reduce using rule 45 (factor -> elem .)
    IF              reduce using rule 45 (factor -> elem .)
    LET             reduce using rule 45 (factor -> elem .)
    END             reduce using rule 45 (factor -> elem .)
    RETURN          reduce using rule 45 (factor -> elem .)
    LOOP            reduce using rule 45 (factor -> elem .)
    ELSE            reduce using rule 45 (factor -> elem .)
    NEXT            reduce using rule 45 (factor -> elem .)


state 46

    (46) factor -> OPENPAR . expression CLOSEPAR
    (35) expression -> . expression_s op_rel expression_s
    (36) expression -> . expression_s
    (37) expression_s -> . term
    (38) expression_s -> . term PLUS expression_s
    (39) expression_s -> . term MINUS expression_s
    (40) expression_s -> . term OR expression_s
    (41) term -> . factor
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor AND term
    (45) factor -> . elem
    (46) factor -> . OPENPAR expression CLOSEPAR
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    OPENPAR         shift and go to state 46
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    expression                     shift and go to state 76
    expression_s                   shift and go to state 42
    term                           shift and go to state 43
    factor                         shift and go to state 44
    elem                           shift and go to state 45
    elem_else                      shift and go to state 35

state 47

    (18) statement -> GOSUB LABEL .

    INPUT           reduce using rule 18 (statement -> GOSUB LABEL .)
    PRINT           reduce using rule 18 (statement -> GOSUB LABEL .)
    FOR             reduce using rule 18 (statement -> GOSUB LABEL .)
    DO              reduce using rule 18 (statement -> GOSUB LABEL .)
    GOSUB           reduce using rule 18 (statement -> GOSUB LABEL .)
    GOTO            reduce using rule 18 (statement -> GOSUB LABEL .)
    LABEL_SALTO     reduce using rule 18 (statement -> GOSUB LABEL .)
    WHILE           reduce using rule 18 (statement -> GOSUB LABEL .)
    IF              reduce using rule 18 (statement -> GOSUB LABEL .)
    LET             reduce using rule 18 (statement -> GOSUB LABEL .)
    END             reduce using rule 18 (statement -> GOSUB LABEL .)
    RETURN          reduce using rule 18 (statement -> GOSUB LABEL .)
    LOOP            reduce using rule 18 (statement -> GOSUB LABEL .)
    ELSE            reduce using rule 18 (statement -> GOSUB LABEL .)
    NEXT            reduce using rule 18 (statement -> GOSUB LABEL .)


state 48

    (19) statement -> GOTO LABEL .

    INPUT           reduce using rule 19 (statement -> GOTO LABEL .)
    PRINT           reduce using rule 19 (statement -> GOTO LABEL .)
    FOR             reduce using rule 19 (statement -> GOTO LABEL .)
    DO              reduce using rule 19 (statement -> GOTO LABEL .)
    GOSUB           reduce using rule 19 (statement -> GOTO LABEL .)
    GOTO            reduce using rule 19 (statement -> GOTO LABEL .)
    LABEL_SALTO     reduce using rule 19 (statement -> GOTO LABEL .)
    WHILE           reduce using rule 19 (statement -> GOTO LABEL .)
    IF              reduce using rule 19 (statement -> GOTO LABEL .)
    LET             reduce using rule 19 (statement -> GOTO LABEL .)
    END             reduce using rule 19 (statement -> GOTO LABEL .)
    RETURN          reduce using rule 19 (statement -> GOTO LABEL .)
    LOOP            reduce using rule 19 (statement -> GOTO LABEL .)
    ELSE            reduce using rule 19 (statement -> GOTO LABEL .)
    NEXT            reduce using rule 19 (statement -> GOTO LABEL .)


state 49

    (24) statement -> IF aux_if . THEN block ELSE aux_else block END IF aux_fin

    THEN            shift and go to state 77


state 50

    (25) aux_if -> expression .

    THEN            reduce using rule 25 (aux_if -> expression .)


state 51

    (28) statement -> LET IDENTIFIER . repeated_size EQUALS expression
    (5) repeated_size -> . SIZE repeated_size
    (6) repeated_size -> . SIZE_ID repeated_size
    (7) repeated_size -> . empty
    (54) empty -> .

    SIZE            shift and go to state 60
    SIZE_ID         shift and go to state 61
    EQUALS          reduce using rule 54 (empty -> .)

    repeated_size                  shift and go to state 78
    empty                          shift and go to state 62

state 52

    (29) procedure -> LABEL block RETURN . procedure
    (29) procedure -> . LABEL block RETURN procedure
    (30) procedure -> . empty
    (54) empty -> .

    LABEL           shift and go to state 7
    INPUT           reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    FOR             reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    GOSUB           reduce using rule 54 (empty -> .)
    GOTO            reduce using rule 54 (empty -> .)
    LABEL_SALTO     reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    LET             reduce using rule 54 (empty -> .)
    END             reduce using rule 54 (empty -> .)

    procedure                      shift and go to state 79
    empty                          shift and go to state 8

state 53

    (2) var -> DIM repeated_identifier AS type . repeated_size var
    (5) repeated_size -> . SIZE repeated_size
    (6) repeated_size -> . SIZE_ID repeated_size
    (7) repeated_size -> . empty
    (54) empty -> .

    SIZE            shift and go to state 60
    SIZE_ID         shift and go to state 61
    DIM             reduce using rule 54 (empty -> .)
    LABEL           reduce using rule 54 (empty -> .)
    INPUT           reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    FOR             reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    GOSUB           reduce using rule 54 (empty -> .)
    GOTO            reduce using rule 54 (empty -> .)
    LABEL_SALTO     reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    LET             reduce using rule 54 (empty -> .)
    END             reduce using rule 54 (empty -> .)

    repeated_size                  shift and go to state 80
    empty                          shift and go to state 62

state 54

    (3) var -> DIM repeated_identifier AS STRING_TYPE . var
    (2) var -> . DIM repeated_identifier AS type repeated_size var
    (3) var -> . DIM repeated_identifier AS STRING_TYPE var
    (4) var -> . empty
    (54) empty -> .

    DIM             shift and go to state 4
    LABEL           reduce using rule 54 (empty -> .)
    INPUT           reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    FOR             reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    GOSUB           reduce using rule 54 (empty -> .)
    GOTO            reduce using rule 54 (empty -> .)
    LABEL_SALTO     reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    LET             reduce using rule 54 (empty -> .)
    END             reduce using rule 54 (empty -> .)

    var                            shift and go to state 81
    empty                          shift and go to state 5

state 55

    (10) type -> INT_TYPE .

    SIZE            reduce using rule 10 (type -> INT_TYPE .)
    SIZE_ID         reduce using rule 10 (type -> INT_TYPE .)
    DIM             reduce using rule 10 (type -> INT_TYPE .)
    LABEL           reduce using rule 10 (type -> INT_TYPE .)
    INPUT           reduce using rule 10 (type -> INT_TYPE .)
    PRINT           reduce using rule 10 (type -> INT_TYPE .)
    FOR             reduce using rule 10 (type -> INT_TYPE .)
    DO              reduce using rule 10 (type -> INT_TYPE .)
    GOSUB           reduce using rule 10 (type -> INT_TYPE .)
    GOTO            reduce using rule 10 (type -> INT_TYPE .)
    LABEL_SALTO     reduce using rule 10 (type -> INT_TYPE .)
    WHILE           reduce using rule 10 (type -> INT_TYPE .)
    IF              reduce using rule 10 (type -> INT_TYPE .)
    LET             reduce using rule 10 (type -> INT_TYPE .)
    END             reduce using rule 10 (type -> INT_TYPE .)


state 56

    (11) type -> FLOAT_TYPE .

    SIZE            reduce using rule 11 (type -> FLOAT_TYPE .)
    SIZE_ID         reduce using rule 11 (type -> FLOAT_TYPE .)
    DIM             reduce using rule 11 (type -> FLOAT_TYPE .)
    LABEL           reduce using rule 11 (type -> FLOAT_TYPE .)
    INPUT           reduce using rule 11 (type -> FLOAT_TYPE .)
    PRINT           reduce using rule 11 (type -> FLOAT_TYPE .)
    FOR             reduce using rule 11 (type -> FLOAT_TYPE .)
    DO              reduce using rule 11 (type -> FLOAT_TYPE .)
    GOSUB           reduce using rule 11 (type -> FLOAT_TYPE .)
    GOTO            reduce using rule 11 (type -> FLOAT_TYPE .)
    LABEL_SALTO     reduce using rule 11 (type -> FLOAT_TYPE .)
    WHILE           reduce using rule 11 (type -> FLOAT_TYPE .)
    IF              reduce using rule 11 (type -> FLOAT_TYPE .)
    LET             reduce using rule 11 (type -> FLOAT_TYPE .)
    END             reduce using rule 11 (type -> FLOAT_TYPE .)


state 57

    (8) repeated_identifier -> IDENTIFIER COMMA repeated_identifier .

    AS              reduce using rule 8 (repeated_identifier -> IDENTIFIER COMMA repeated_identifier .)


state 58

    (31) repeated_print -> repeated_elem COMMA . repeated_print
    (31) repeated_print -> . repeated_elem COMMA repeated_print
    (32) repeated_print -> . repeated_elem
    (33) repeated_elem -> . STRING
    (34) repeated_elem -> . elem
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    STRING          shift and go to state 31
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    repeated_elem                  shift and go to state 30
    repeated_print                 shift and go to state 82
    elem                           shift and go to state 32
    elem_else                      shift and go to state 35

state 59

    (48) elem -> IDENTIFIER repeated_size .

    COMMA           reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    INPUT           reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    PRINT           reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    FOR             reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    DO              reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    GOSUB           reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    GOTO            reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    LABEL_SALTO     reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    WHILE           reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    IF              reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    LET             reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    END             reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    RETURN          reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    LOOP            reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    ELSE            reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    NEXT            reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    MULTIPLY        reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    DIVIDE          reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    AND             reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    PLUS            reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    MINUS           reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    OR              reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    LESSTHAN        reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    GREATERTHAN     reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    ISEQUALTO       reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    THEN            reduce using rule 48 (elem -> IDENTIFIER repeated_size .)
    CLOSEPAR        reduce using rule 48 (elem -> IDENTIFIER repeated_size .)


state 60

    (5) repeated_size -> SIZE . repeated_size
    (5) repeated_size -> . SIZE repeated_size
    (6) repeated_size -> . SIZE_ID repeated_size
    (7) repeated_size -> . empty
    (54) empty -> .

    SIZE            shift and go to state 60
    SIZE_ID         shift and go to state 61
    COMMA           reduce using rule 54 (empty -> .)
    INPUT           reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    FOR             reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    GOSUB           reduce using rule 54 (empty -> .)
    GOTO            reduce using rule 54 (empty -> .)
    LABEL_SALTO     reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    LET             reduce using rule 54 (empty -> .)
    END             reduce using rule 54 (empty -> .)
    RETURN          reduce using rule 54 (empty -> .)
    LOOP            reduce using rule 54 (empty -> .)
    ELSE            reduce using rule 54 (empty -> .)
    NEXT            reduce using rule 54 (empty -> .)
    MULTIPLY        reduce using rule 54 (empty -> .)
    DIVIDE          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    PLUS            reduce using rule 54 (empty -> .)
    MINUS           reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    LESSTHAN        reduce using rule 54 (empty -> .)
    GREATERTHAN     reduce using rule 54 (empty -> .)
    ISEQUALTO       reduce using rule 54 (empty -> .)
    THEN            reduce using rule 54 (empty -> .)
    CLOSEPAR        reduce using rule 54 (empty -> .)
    EQUALS          reduce using rule 54 (empty -> .)
    DIM             reduce using rule 54 (empty -> .)
    LABEL           reduce using rule 54 (empty -> .)

    repeated_size                  shift and go to state 83
    empty                          shift and go to state 62

state 61

    (6) repeated_size -> SIZE_ID . repeated_size
    (5) repeated_size -> . SIZE repeated_size
    (6) repeated_size -> . SIZE_ID repeated_size
    (7) repeated_size -> . empty
    (54) empty -> .

    SIZE            shift and go to state 60
    SIZE_ID         shift and go to state 61
    COMMA           reduce using rule 54 (empty -> .)
    INPUT           reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    FOR             reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    GOSUB           reduce using rule 54 (empty -> .)
    GOTO            reduce using rule 54 (empty -> .)
    LABEL_SALTO     reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    LET             reduce using rule 54 (empty -> .)
    END             reduce using rule 54 (empty -> .)
    RETURN          reduce using rule 54 (empty -> .)
    LOOP            reduce using rule 54 (empty -> .)
    ELSE            reduce using rule 54 (empty -> .)
    NEXT            reduce using rule 54 (empty -> .)
    MULTIPLY        reduce using rule 54 (empty -> .)
    DIVIDE          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    PLUS            reduce using rule 54 (empty -> .)
    MINUS           reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    LESSTHAN        reduce using rule 54 (empty -> .)
    GREATERTHAN     reduce using rule 54 (empty -> .)
    ISEQUALTO       reduce using rule 54 (empty -> .)
    THEN            reduce using rule 54 (empty -> .)
    CLOSEPAR        reduce using rule 54 (empty -> .)
    EQUALS          reduce using rule 54 (empty -> .)
    DIM             reduce using rule 54 (empty -> .)
    LABEL           reduce using rule 54 (empty -> .)

    repeated_size                  shift and go to state 84
    empty                          shift and go to state 62

state 62

    (7) repeated_size -> empty .

    COMMA           reduce using rule 7 (repeated_size -> empty .)
    INPUT           reduce using rule 7 (repeated_size -> empty .)
    PRINT           reduce using rule 7 (repeated_size -> empty .)
    FOR             reduce using rule 7 (repeated_size -> empty .)
    DO              reduce using rule 7 (repeated_size -> empty .)
    GOSUB           reduce using rule 7 (repeated_size -> empty .)
    GOTO            reduce using rule 7 (repeated_size -> empty .)
    LABEL_SALTO     reduce using rule 7 (repeated_size -> empty .)
    WHILE           reduce using rule 7 (repeated_size -> empty .)
    IF              reduce using rule 7 (repeated_size -> empty .)
    LET             reduce using rule 7 (repeated_size -> empty .)
    END             reduce using rule 7 (repeated_size -> empty .)
    RETURN          reduce using rule 7 (repeated_size -> empty .)
    LOOP            reduce using rule 7 (repeated_size -> empty .)
    ELSE            reduce using rule 7 (repeated_size -> empty .)
    NEXT            reduce using rule 7 (repeated_size -> empty .)
    MULTIPLY        reduce using rule 7 (repeated_size -> empty .)
    DIVIDE          reduce using rule 7 (repeated_size -> empty .)
    AND             reduce using rule 7 (repeated_size -> empty .)
    PLUS            reduce using rule 7 (repeated_size -> empty .)
    MINUS           reduce using rule 7 (repeated_size -> empty .)
    OR              reduce using rule 7 (repeated_size -> empty .)
    LESSTHAN        reduce using rule 7 (repeated_size -> empty .)
    GREATERTHAN     reduce using rule 7 (repeated_size -> empty .)
    ISEQUALTO       reduce using rule 7 (repeated_size -> empty .)
    THEN            reduce using rule 7 (repeated_size -> empty .)
    CLOSEPAR        reduce using rule 7 (repeated_size -> empty .)
    EQUALS          reduce using rule 7 (repeated_size -> empty .)
    DIM             reduce using rule 7 (repeated_size -> empty .)
    LABEL           reduce using rule 7 (repeated_size -> empty .)


state 63

    (16) statement -> FOR IDENTIFIER EQUALS . INT TO INT block NEXT IDENTIFIER

    INT             shift and go to state 85


state 64

    (17) statement -> DO block LOOP . WHILE expression

    WHILE           shift and go to state 86


state 65

    (21) statement -> WHILE aux_while DO . block LOOP fin_while
    (12) block -> . statement block
    (13) block -> . empty
    (14) statement -> . INPUT repeated_print
    (15) statement -> . PRINT repeated_print
    (16) statement -> . FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER
    (17) statement -> . DO block LOOP WHILE expression
    (18) statement -> . GOSUB LABEL
    (19) statement -> . GOTO LABEL
    (20) statement -> . LABEL_SALTO
    (21) statement -> . WHILE aux_while DO block LOOP fin_while
    (24) statement -> . IF aux_if THEN block ELSE aux_else block END IF aux_fin
    (28) statement -> . LET IDENTIFIER repeated_size EQUALS expression
    (54) empty -> .

    INPUT           shift and go to state 14
    PRINT           shift and go to state 15
    FOR             shift and go to state 16
    DO              shift and go to state 17
    GOSUB           shift and go to state 19
    GOTO            shift and go to state 20
    LABEL_SALTO     shift and go to state 21
    WHILE           shift and go to state 18
    IF              shift and go to state 22
    LET             shift and go to state 23
    LOOP            reduce using rule 54 (empty -> .)

    block                          shift and go to state 87
    statement                      shift and go to state 12
    empty                          shift and go to state 13

state 66

    (35) expression -> expression_s op_rel . expression_s
    (37) expression_s -> . term
    (38) expression_s -> . term PLUS expression_s
    (39) expression_s -> . term MINUS expression_s
    (40) expression_s -> . term OR expression_s
    (41) term -> . factor
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor AND term
    (45) factor -> . elem
    (46) factor -> . OPENPAR expression CLOSEPAR
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    OPENPAR         shift and go to state 46
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    expression_s                   shift and go to state 88
    term                           shift and go to state 43
    factor                         shift and go to state 44
    elem                           shift and go to state 45
    elem_else                      shift and go to state 35

state 67

    (51) op_rel -> LESSTHAN .

    OPENPAR         reduce using rule 51 (op_rel -> LESSTHAN .)
    INT             reduce using rule 51 (op_rel -> LESSTHAN .)
    IDENTIFIER      reduce using rule 51 (op_rel -> LESSTHAN .)
    FLOAT           reduce using rule 51 (op_rel -> LESSTHAN .)


state 68

    (52) op_rel -> GREATERTHAN .

    OPENPAR         reduce using rule 52 (op_rel -> GREATERTHAN .)
    INT             reduce using rule 52 (op_rel -> GREATERTHAN .)
    IDENTIFIER      reduce using rule 52 (op_rel -> GREATERTHAN .)
    FLOAT           reduce using rule 52 (op_rel -> GREATERTHAN .)


state 69

    (53) op_rel -> ISEQUALTO .

    OPENPAR         reduce using rule 53 (op_rel -> ISEQUALTO .)
    INT             reduce using rule 53 (op_rel -> ISEQUALTO .)
    IDENTIFIER      reduce using rule 53 (op_rel -> ISEQUALTO .)
    FLOAT           reduce using rule 53 (op_rel -> ISEQUALTO .)


state 70

    (38) expression_s -> term PLUS . expression_s
    (37) expression_s -> . term
    (38) expression_s -> . term PLUS expression_s
    (39) expression_s -> . term MINUS expression_s
    (40) expression_s -> . term OR expression_s
    (41) term -> . factor
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor AND term
    (45) factor -> . elem
    (46) factor -> . OPENPAR expression CLOSEPAR
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    OPENPAR         shift and go to state 46
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    term                           shift and go to state 43
    expression_s                   shift and go to state 89
    factor                         shift and go to state 44
    elem                           shift and go to state 45
    elem_else                      shift and go to state 35

state 71

    (39) expression_s -> term MINUS . expression_s
    (37) expression_s -> . term
    (38) expression_s -> . term PLUS expression_s
    (39) expression_s -> . term MINUS expression_s
    (40) expression_s -> . term OR expression_s
    (41) term -> . factor
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor AND term
    (45) factor -> . elem
    (46) factor -> . OPENPAR expression CLOSEPAR
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    OPENPAR         shift and go to state 46
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    term                           shift and go to state 43
    expression_s                   shift and go to state 90
    factor                         shift and go to state 44
    elem                           shift and go to state 45
    elem_else                      shift and go to state 35

state 72

    (40) expression_s -> term OR . expression_s
    (37) expression_s -> . term
    (38) expression_s -> . term PLUS expression_s
    (39) expression_s -> . term MINUS expression_s
    (40) expression_s -> . term OR expression_s
    (41) term -> . factor
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor AND term
    (45) factor -> . elem
    (46) factor -> . OPENPAR expression CLOSEPAR
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    OPENPAR         shift and go to state 46
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    term                           shift and go to state 43
    expression_s                   shift and go to state 91
    factor                         shift and go to state 44
    elem                           shift and go to state 45
    elem_else                      shift and go to state 35

state 73

    (42) term -> factor MULTIPLY . term
    (41) term -> . factor
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor AND term
    (45) factor -> . elem
    (46) factor -> . OPENPAR expression CLOSEPAR
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    OPENPAR         shift and go to state 46
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    factor                         shift and go to state 44
    term                           shift and go to state 92
    elem                           shift and go to state 45
    elem_else                      shift and go to state 35

state 74

    (43) term -> factor DIVIDE . term
    (41) term -> . factor
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor AND term
    (45) factor -> . elem
    (46) factor -> . OPENPAR expression CLOSEPAR
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    OPENPAR         shift and go to state 46
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    factor                         shift and go to state 44
    term                           shift and go to state 93
    elem                           shift and go to state 45
    elem_else                      shift and go to state 35

state 75

    (44) term -> factor AND . term
    (41) term -> . factor
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor AND term
    (45) factor -> . elem
    (46) factor -> . OPENPAR expression CLOSEPAR
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    OPENPAR         shift and go to state 46
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    factor                         shift and go to state 44
    term                           shift and go to state 94
    elem                           shift and go to state 45
    elem_else                      shift and go to state 35

state 76

    (46) factor -> OPENPAR expression . CLOSEPAR

    CLOSEPAR        shift and go to state 95


state 77

    (24) statement -> IF aux_if THEN . block ELSE aux_else block END IF aux_fin
    (12) block -> . statement block
    (13) block -> . empty
    (14) statement -> . INPUT repeated_print
    (15) statement -> . PRINT repeated_print
    (16) statement -> . FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER
    (17) statement -> . DO block LOOP WHILE expression
    (18) statement -> . GOSUB LABEL
    (19) statement -> . GOTO LABEL
    (20) statement -> . LABEL_SALTO
    (21) statement -> . WHILE aux_while DO block LOOP fin_while
    (24) statement -> . IF aux_if THEN block ELSE aux_else block END IF aux_fin
    (28) statement -> . LET IDENTIFIER repeated_size EQUALS expression
    (54) empty -> .

    INPUT           shift and go to state 14
    PRINT           shift and go to state 15
    FOR             shift and go to state 16
    DO              shift and go to state 17
    GOSUB           shift and go to state 19
    GOTO            shift and go to state 20
    LABEL_SALTO     shift and go to state 21
    WHILE           shift and go to state 18
    IF              shift and go to state 22
    LET             shift and go to state 23
    ELSE            reduce using rule 54 (empty -> .)

    block                          shift and go to state 96
    statement                      shift and go to state 12
    empty                          shift and go to state 13

state 78

    (28) statement -> LET IDENTIFIER repeated_size . EQUALS expression

    EQUALS          shift and go to state 97


state 79

    (29) procedure -> LABEL block RETURN procedure .

    INPUT           reduce using rule 29 (procedure -> LABEL block RETURN procedure .)
    PRINT           reduce using rule 29 (procedure -> LABEL block RETURN procedure .)
    FOR             reduce using rule 29 (procedure -> LABEL block RETURN procedure .)
    DO              reduce using rule 29 (procedure -> LABEL block RETURN procedure .)
    GOSUB           reduce using rule 29 (procedure -> LABEL block RETURN procedure .)
    GOTO            reduce using rule 29 (procedure -> LABEL block RETURN procedure .)
    LABEL_SALTO     reduce using rule 29 (procedure -> LABEL block RETURN procedure .)
    WHILE           reduce using rule 29 (procedure -> LABEL block RETURN procedure .)
    IF              reduce using rule 29 (procedure -> LABEL block RETURN procedure .)
    LET             reduce using rule 29 (procedure -> LABEL block RETURN procedure .)
    END             reduce using rule 29 (procedure -> LABEL block RETURN procedure .)


state 80

    (2) var -> DIM repeated_identifier AS type repeated_size . var
    (2) var -> . DIM repeated_identifier AS type repeated_size var
    (3) var -> . DIM repeated_identifier AS STRING_TYPE var
    (4) var -> . empty
    (54) empty -> .

    DIM             shift and go to state 4
    LABEL           reduce using rule 54 (empty -> .)
    INPUT           reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    FOR             reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    GOSUB           reduce using rule 54 (empty -> .)
    GOTO            reduce using rule 54 (empty -> .)
    LABEL_SALTO     reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    LET             reduce using rule 54 (empty -> .)
    END             reduce using rule 54 (empty -> .)

    var                            shift and go to state 98
    empty                          shift and go to state 5

state 81

    (3) var -> DIM repeated_identifier AS STRING_TYPE var .

    LABEL           reduce using rule 3 (var -> DIM repeated_identifier AS STRING_TYPE var .)
    INPUT           reduce using rule 3 (var -> DIM repeated_identifier AS STRING_TYPE var .)
    PRINT           reduce using rule 3 (var -> DIM repeated_identifier AS STRING_TYPE var .)
    FOR             reduce using rule 3 (var -> DIM repeated_identifier AS STRING_TYPE var .)
    DO              reduce using rule 3 (var -> DIM repeated_identifier AS STRING_TYPE var .)
    GOSUB           reduce using rule 3 (var -> DIM repeated_identifier AS STRING_TYPE var .)
    GOTO            reduce using rule 3 (var -> DIM repeated_identifier AS STRING_TYPE var .)
    LABEL_SALTO     reduce using rule 3 (var -> DIM repeated_identifier AS STRING_TYPE var .)
    WHILE           reduce using rule 3 (var -> DIM repeated_identifier AS STRING_TYPE var .)
    IF              reduce using rule 3 (var -> DIM repeated_identifier AS STRING_TYPE var .)
    LET             reduce using rule 3 (var -> DIM repeated_identifier AS STRING_TYPE var .)
    END             reduce using rule 3 (var -> DIM repeated_identifier AS STRING_TYPE var .)


state 82

    (31) repeated_print -> repeated_elem COMMA repeated_print .

    INPUT           reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    PRINT           reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    FOR             reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    DO              reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    GOSUB           reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    GOTO            reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    LABEL_SALTO     reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    WHILE           reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    IF              reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    LET             reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    END             reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    RETURN          reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    LOOP            reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    ELSE            reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)
    NEXT            reduce using rule 31 (repeated_print -> repeated_elem COMMA repeated_print .)


state 83

    (5) repeated_size -> SIZE repeated_size .

    COMMA           reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    INPUT           reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    PRINT           reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    FOR             reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    DO              reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    GOSUB           reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    GOTO            reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    LABEL_SALTO     reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    WHILE           reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    IF              reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    LET             reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    END             reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    RETURN          reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    LOOP            reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    ELSE            reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    NEXT            reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    MULTIPLY        reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    DIVIDE          reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    AND             reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    PLUS            reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    MINUS           reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    OR              reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    LESSTHAN        reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    GREATERTHAN     reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    ISEQUALTO       reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    THEN            reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    CLOSEPAR        reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    EQUALS          reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    DIM             reduce using rule 5 (repeated_size -> SIZE repeated_size .)
    LABEL           reduce using rule 5 (repeated_size -> SIZE repeated_size .)


state 84

    (6) repeated_size -> SIZE_ID repeated_size .

    COMMA           reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    INPUT           reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    PRINT           reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    FOR             reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    DO              reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    GOSUB           reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    GOTO            reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    LABEL_SALTO     reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    WHILE           reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    IF              reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    LET             reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    END             reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    RETURN          reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    LOOP            reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    ELSE            reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    NEXT            reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    MULTIPLY        reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    DIVIDE          reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    AND             reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    PLUS            reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    MINUS           reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    OR              reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    LESSTHAN        reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    GREATERTHAN     reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    ISEQUALTO       reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    THEN            reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    CLOSEPAR        reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    EQUALS          reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    DIM             reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)
    LABEL           reduce using rule 6 (repeated_size -> SIZE_ID repeated_size .)


state 85

    (16) statement -> FOR IDENTIFIER EQUALS INT . TO INT block NEXT IDENTIFIER

    TO              shift and go to state 99


state 86

    (17) statement -> DO block LOOP WHILE . expression
    (35) expression -> . expression_s op_rel expression_s
    (36) expression -> . expression_s
    (37) expression_s -> . term
    (38) expression_s -> . term PLUS expression_s
    (39) expression_s -> . term MINUS expression_s
    (40) expression_s -> . term OR expression_s
    (41) term -> . factor
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor AND term
    (45) factor -> . elem
    (46) factor -> . OPENPAR expression CLOSEPAR
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    OPENPAR         shift and go to state 46
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    expression                     shift and go to state 100
    expression_s                   shift and go to state 42
    term                           shift and go to state 43
    factor                         shift and go to state 44
    elem                           shift and go to state 45
    elem_else                      shift and go to state 35

state 87

    (21) statement -> WHILE aux_while DO block . LOOP fin_while

    LOOP            shift and go to state 101


state 88

    (35) expression -> expression_s op_rel expression_s .

    DO              reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    THEN            reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    CLOSEPAR        reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    INPUT           reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    PRINT           reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    FOR             reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    GOSUB           reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    GOTO            reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    LABEL_SALTO     reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    WHILE           reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    IF              reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    LET             reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    END             reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    RETURN          reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    LOOP            reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    ELSE            reduce using rule 35 (expression -> expression_s op_rel expression_s .)
    NEXT            reduce using rule 35 (expression -> expression_s op_rel expression_s .)


state 89

    (38) expression_s -> term PLUS expression_s .

    LESSTHAN        reduce using rule 38 (expression_s -> term PLUS expression_s .)
    GREATERTHAN     reduce using rule 38 (expression_s -> term PLUS expression_s .)
    ISEQUALTO       reduce using rule 38 (expression_s -> term PLUS expression_s .)
    DO              reduce using rule 38 (expression_s -> term PLUS expression_s .)
    THEN            reduce using rule 38 (expression_s -> term PLUS expression_s .)
    CLOSEPAR        reduce using rule 38 (expression_s -> term PLUS expression_s .)
    INPUT           reduce using rule 38 (expression_s -> term PLUS expression_s .)
    PRINT           reduce using rule 38 (expression_s -> term PLUS expression_s .)
    FOR             reduce using rule 38 (expression_s -> term PLUS expression_s .)
    GOSUB           reduce using rule 38 (expression_s -> term PLUS expression_s .)
    GOTO            reduce using rule 38 (expression_s -> term PLUS expression_s .)
    LABEL_SALTO     reduce using rule 38 (expression_s -> term PLUS expression_s .)
    WHILE           reduce using rule 38 (expression_s -> term PLUS expression_s .)
    IF              reduce using rule 38 (expression_s -> term PLUS expression_s .)
    LET             reduce using rule 38 (expression_s -> term PLUS expression_s .)
    END             reduce using rule 38 (expression_s -> term PLUS expression_s .)
    RETURN          reduce using rule 38 (expression_s -> term PLUS expression_s .)
    LOOP            reduce using rule 38 (expression_s -> term PLUS expression_s .)
    ELSE            reduce using rule 38 (expression_s -> term PLUS expression_s .)
    NEXT            reduce using rule 38 (expression_s -> term PLUS expression_s .)


state 90

    (39) expression_s -> term MINUS expression_s .

    LESSTHAN        reduce using rule 39 (expression_s -> term MINUS expression_s .)
    GREATERTHAN     reduce using rule 39 (expression_s -> term MINUS expression_s .)
    ISEQUALTO       reduce using rule 39 (expression_s -> term MINUS expression_s .)
    DO              reduce using rule 39 (expression_s -> term MINUS expression_s .)
    THEN            reduce using rule 39 (expression_s -> term MINUS expression_s .)
    CLOSEPAR        reduce using rule 39 (expression_s -> term MINUS expression_s .)
    INPUT           reduce using rule 39 (expression_s -> term MINUS expression_s .)
    PRINT           reduce using rule 39 (expression_s -> term MINUS expression_s .)
    FOR             reduce using rule 39 (expression_s -> term MINUS expression_s .)
    GOSUB           reduce using rule 39 (expression_s -> term MINUS expression_s .)
    GOTO            reduce using rule 39 (expression_s -> term MINUS expression_s .)
    LABEL_SALTO     reduce using rule 39 (expression_s -> term MINUS expression_s .)
    WHILE           reduce using rule 39 (expression_s -> term MINUS expression_s .)
    IF              reduce using rule 39 (expression_s -> term MINUS expression_s .)
    LET             reduce using rule 39 (expression_s -> term MINUS expression_s .)
    END             reduce using rule 39 (expression_s -> term MINUS expression_s .)
    RETURN          reduce using rule 39 (expression_s -> term MINUS expression_s .)
    LOOP            reduce using rule 39 (expression_s -> term MINUS expression_s .)
    ELSE            reduce using rule 39 (expression_s -> term MINUS expression_s .)
    NEXT            reduce using rule 39 (expression_s -> term MINUS expression_s .)


state 91

    (40) expression_s -> term OR expression_s .

    LESSTHAN        reduce using rule 40 (expression_s -> term OR expression_s .)
    GREATERTHAN     reduce using rule 40 (expression_s -> term OR expression_s .)
    ISEQUALTO       reduce using rule 40 (expression_s -> term OR expression_s .)
    DO              reduce using rule 40 (expression_s -> term OR expression_s .)
    THEN            reduce using rule 40 (expression_s -> term OR expression_s .)
    CLOSEPAR        reduce using rule 40 (expression_s -> term OR expression_s .)
    INPUT           reduce using rule 40 (expression_s -> term OR expression_s .)
    PRINT           reduce using rule 40 (expression_s -> term OR expression_s .)
    FOR             reduce using rule 40 (expression_s -> term OR expression_s .)
    GOSUB           reduce using rule 40 (expression_s -> term OR expression_s .)
    GOTO            reduce using rule 40 (expression_s -> term OR expression_s .)
    LABEL_SALTO     reduce using rule 40 (expression_s -> term OR expression_s .)
    WHILE           reduce using rule 40 (expression_s -> term OR expression_s .)
    IF              reduce using rule 40 (expression_s -> term OR expression_s .)
    LET             reduce using rule 40 (expression_s -> term OR expression_s .)
    END             reduce using rule 40 (expression_s -> term OR expression_s .)
    RETURN          reduce using rule 40 (expression_s -> term OR expression_s .)
    LOOP            reduce using rule 40 (expression_s -> term OR expression_s .)
    ELSE            reduce using rule 40 (expression_s -> term OR expression_s .)
    NEXT            reduce using rule 40 (expression_s -> term OR expression_s .)


state 92

    (42) term -> factor MULTIPLY term .

    PLUS            reduce using rule 42 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 42 (term -> factor MULTIPLY term .)
    OR              reduce using rule 42 (term -> factor MULTIPLY term .)
    LESSTHAN        reduce using rule 42 (term -> factor MULTIPLY term .)
    GREATERTHAN     reduce using rule 42 (term -> factor MULTIPLY term .)
    ISEQUALTO       reduce using rule 42 (term -> factor MULTIPLY term .)
    DO              reduce using rule 42 (term -> factor MULTIPLY term .)
    THEN            reduce using rule 42 (term -> factor MULTIPLY term .)
    CLOSEPAR        reduce using rule 42 (term -> factor MULTIPLY term .)
    INPUT           reduce using rule 42 (term -> factor MULTIPLY term .)
    PRINT           reduce using rule 42 (term -> factor MULTIPLY term .)
    FOR             reduce using rule 42 (term -> factor MULTIPLY term .)
    GOSUB           reduce using rule 42 (term -> factor MULTIPLY term .)
    GOTO            reduce using rule 42 (term -> factor MULTIPLY term .)
    LABEL_SALTO     reduce using rule 42 (term -> factor MULTIPLY term .)
    WHILE           reduce using rule 42 (term -> factor MULTIPLY term .)
    IF              reduce using rule 42 (term -> factor MULTIPLY term .)
    LET             reduce using rule 42 (term -> factor MULTIPLY term .)
    END             reduce using rule 42 (term -> factor MULTIPLY term .)
    RETURN          reduce using rule 42 (term -> factor MULTIPLY term .)
    LOOP            reduce using rule 42 (term -> factor MULTIPLY term .)
    ELSE            reduce using rule 42 (term -> factor MULTIPLY term .)
    NEXT            reduce using rule 42 (term -> factor MULTIPLY term .)


state 93

    (43) term -> factor DIVIDE term .

    PLUS            reduce using rule 43 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 43 (term -> factor DIVIDE term .)
    OR              reduce using rule 43 (term -> factor DIVIDE term .)
    LESSTHAN        reduce using rule 43 (term -> factor DIVIDE term .)
    GREATERTHAN     reduce using rule 43 (term -> factor DIVIDE term .)
    ISEQUALTO       reduce using rule 43 (term -> factor DIVIDE term .)
    DO              reduce using rule 43 (term -> factor DIVIDE term .)
    THEN            reduce using rule 43 (term -> factor DIVIDE term .)
    CLOSEPAR        reduce using rule 43 (term -> factor DIVIDE term .)
    INPUT           reduce using rule 43 (term -> factor DIVIDE term .)
    PRINT           reduce using rule 43 (term -> factor DIVIDE term .)
    FOR             reduce using rule 43 (term -> factor DIVIDE term .)
    GOSUB           reduce using rule 43 (term -> factor DIVIDE term .)
    GOTO            reduce using rule 43 (term -> factor DIVIDE term .)
    LABEL_SALTO     reduce using rule 43 (term -> factor DIVIDE term .)
    WHILE           reduce using rule 43 (term -> factor DIVIDE term .)
    IF              reduce using rule 43 (term -> factor DIVIDE term .)
    LET             reduce using rule 43 (term -> factor DIVIDE term .)
    END             reduce using rule 43 (term -> factor DIVIDE term .)
    RETURN          reduce using rule 43 (term -> factor DIVIDE term .)
    LOOP            reduce using rule 43 (term -> factor DIVIDE term .)
    ELSE            reduce using rule 43 (term -> factor DIVIDE term .)
    NEXT            reduce using rule 43 (term -> factor DIVIDE term .)


state 94

    (44) term -> factor AND term .

    PLUS            reduce using rule 44 (term -> factor AND term .)
    MINUS           reduce using rule 44 (term -> factor AND term .)
    OR              reduce using rule 44 (term -> factor AND term .)
    LESSTHAN        reduce using rule 44 (term -> factor AND term .)
    GREATERTHAN     reduce using rule 44 (term -> factor AND term .)
    ISEQUALTO       reduce using rule 44 (term -> factor AND term .)
    DO              reduce using rule 44 (term -> factor AND term .)
    THEN            reduce using rule 44 (term -> factor AND term .)
    CLOSEPAR        reduce using rule 44 (term -> factor AND term .)
    INPUT           reduce using rule 44 (term -> factor AND term .)
    PRINT           reduce using rule 44 (term -> factor AND term .)
    FOR             reduce using rule 44 (term -> factor AND term .)
    GOSUB           reduce using rule 44 (term -> factor AND term .)
    GOTO            reduce using rule 44 (term -> factor AND term .)
    LABEL_SALTO     reduce using rule 44 (term -> factor AND term .)
    WHILE           reduce using rule 44 (term -> factor AND term .)
    IF              reduce using rule 44 (term -> factor AND term .)
    LET             reduce using rule 44 (term -> factor AND term .)
    END             reduce using rule 44 (term -> factor AND term .)
    RETURN          reduce using rule 44 (term -> factor AND term .)
    LOOP            reduce using rule 44 (term -> factor AND term .)
    ELSE            reduce using rule 44 (term -> factor AND term .)
    NEXT            reduce using rule 44 (term -> factor AND term .)


state 95

    (46) factor -> OPENPAR expression CLOSEPAR .

    MULTIPLY        reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    DIVIDE          reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    AND             reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    PLUS            reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    MINUS           reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    OR              reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    LESSTHAN        reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    GREATERTHAN     reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    ISEQUALTO       reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    DO              reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    THEN            reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    CLOSEPAR        reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    INPUT           reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    PRINT           reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    FOR             reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    GOSUB           reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    GOTO            reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    LABEL_SALTO     reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    WHILE           reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    IF              reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    LET             reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    END             reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    RETURN          reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    LOOP            reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    ELSE            reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)
    NEXT            reduce using rule 46 (factor -> OPENPAR expression CLOSEPAR .)


state 96

    (24) statement -> IF aux_if THEN block . ELSE aux_else block END IF aux_fin

    ELSE            shift and go to state 102


state 97

    (28) statement -> LET IDENTIFIER repeated_size EQUALS . expression
    (35) expression -> . expression_s op_rel expression_s
    (36) expression -> . expression_s
    (37) expression_s -> . term
    (38) expression_s -> . term PLUS expression_s
    (39) expression_s -> . term MINUS expression_s
    (40) expression_s -> . term OR expression_s
    (41) term -> . factor
    (42) term -> . factor MULTIPLY term
    (43) term -> . factor DIVIDE term
    (44) term -> . factor AND term
    (45) factor -> . elem
    (46) factor -> . OPENPAR expression CLOSEPAR
    (47) elem -> . INT
    (48) elem -> . IDENTIFIER repeated_size
    (49) elem -> . elem_else
    (50) elem_else -> . FLOAT

    OPENPAR         shift and go to state 46
    INT             shift and go to state 33
    IDENTIFIER      shift and go to state 34
    FLOAT           shift and go to state 36

    expression                     shift and go to state 103
    expression_s                   shift and go to state 42
    term                           shift and go to state 43
    factor                         shift and go to state 44
    elem                           shift and go to state 45
    elem_else                      shift and go to state 35

state 98

    (2) var -> DIM repeated_identifier AS type repeated_size var .

    LABEL           reduce using rule 2 (var -> DIM repeated_identifier AS type repeated_size var .)
    INPUT           reduce using rule 2 (var -> DIM repeated_identifier AS type repeated_size var .)
    PRINT           reduce using rule 2 (var -> DIM repeated_identifier AS type repeated_size var .)
    FOR             reduce using rule 2 (var -> DIM repeated_identifier AS type repeated_size var .)
    DO              reduce using rule 2 (var -> DIM repeated_identifier AS type repeated_size var .)
    GOSUB           reduce using rule 2 (var -> DIM repeated_identifier AS type repeated_size var .)
    GOTO            reduce using rule 2 (var -> DIM repeated_identifier AS type repeated_size var .)
    LABEL_SALTO     reduce using rule 2 (var -> DIM repeated_identifier AS type repeated_size var .)
    WHILE           reduce using rule 2 (var -> DIM repeated_identifier AS type repeated_size var .)
    IF              reduce using rule 2 (var -> DIM repeated_identifier AS type repeated_size var .)
    LET             reduce using rule 2 (var -> DIM repeated_identifier AS type repeated_size var .)
    END             reduce using rule 2 (var -> DIM repeated_identifier AS type repeated_size var .)


state 99

    (16) statement -> FOR IDENTIFIER EQUALS INT TO . INT block NEXT IDENTIFIER

    INT             shift and go to state 104


state 100

    (17) statement -> DO block LOOP WHILE expression .

    INPUT           reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    PRINT           reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    FOR             reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    DO              reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    GOSUB           reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    GOTO            reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    LABEL_SALTO     reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    WHILE           reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    IF              reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    LET             reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    END             reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    RETURN          reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    LOOP            reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    ELSE            reduce using rule 17 (statement -> DO block LOOP WHILE expression .)
    NEXT            reduce using rule 17 (statement -> DO block LOOP WHILE expression .)


state 101

    (21) statement -> WHILE aux_while DO block LOOP . fin_while
    (23) fin_while -> . empty
    (54) empty -> .

    INPUT           reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    FOR             reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    GOSUB           reduce using rule 54 (empty -> .)
    GOTO            reduce using rule 54 (empty -> .)
    LABEL_SALTO     reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    LET             reduce using rule 54 (empty -> .)
    END             reduce using rule 54 (empty -> .)
    RETURN          reduce using rule 54 (empty -> .)
    LOOP            reduce using rule 54 (empty -> .)
    ELSE            reduce using rule 54 (empty -> .)
    NEXT            reduce using rule 54 (empty -> .)

    fin_while                      shift and go to state 105
    empty                          shift and go to state 106

state 102

    (24) statement -> IF aux_if THEN block ELSE . aux_else block END IF aux_fin
    (26) aux_else -> . empty
    (54) empty -> .

    INPUT           reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    FOR             reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    GOSUB           reduce using rule 54 (empty -> .)
    GOTO            reduce using rule 54 (empty -> .)
    LABEL_SALTO     reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    LET             reduce using rule 54 (empty -> .)
    END             reduce using rule 54 (empty -> .)

    aux_else                       shift and go to state 107
    empty                          shift and go to state 108

state 103

    (28) statement -> LET IDENTIFIER repeated_size EQUALS expression .

    INPUT           reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    PRINT           reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    FOR             reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    DO              reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    GOSUB           reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    GOTO            reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    LABEL_SALTO     reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    WHILE           reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    IF              reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    LET             reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    END             reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    RETURN          reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    LOOP            reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    ELSE            reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)
    NEXT            reduce using rule 28 (statement -> LET IDENTIFIER repeated_size EQUALS expression .)


state 104

    (16) statement -> FOR IDENTIFIER EQUALS INT TO INT . block NEXT IDENTIFIER
    (12) block -> . statement block
    (13) block -> . empty
    (14) statement -> . INPUT repeated_print
    (15) statement -> . PRINT repeated_print
    (16) statement -> . FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER
    (17) statement -> . DO block LOOP WHILE expression
    (18) statement -> . GOSUB LABEL
    (19) statement -> . GOTO LABEL
    (20) statement -> . LABEL_SALTO
    (21) statement -> . WHILE aux_while DO block LOOP fin_while
    (24) statement -> . IF aux_if THEN block ELSE aux_else block END IF aux_fin
    (28) statement -> . LET IDENTIFIER repeated_size EQUALS expression
    (54) empty -> .

    INPUT           shift and go to state 14
    PRINT           shift and go to state 15
    FOR             shift and go to state 16
    DO              shift and go to state 17
    GOSUB           shift and go to state 19
    GOTO            shift and go to state 20
    LABEL_SALTO     shift and go to state 21
    WHILE           shift and go to state 18
    IF              shift and go to state 22
    LET             shift and go to state 23
    NEXT            reduce using rule 54 (empty -> .)

    block                          shift and go to state 109
    statement                      shift and go to state 12
    empty                          shift and go to state 13

state 105

    (21) statement -> WHILE aux_while DO block LOOP fin_while .

    INPUT           reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    PRINT           reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    FOR             reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    DO              reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    GOSUB           reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    GOTO            reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    LABEL_SALTO     reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    WHILE           reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    IF              reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    LET             reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    END             reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    RETURN          reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    LOOP            reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    ELSE            reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)
    NEXT            reduce using rule 21 (statement -> WHILE aux_while DO block LOOP fin_while .)


state 106

    (23) fin_while -> empty .

    INPUT           reduce using rule 23 (fin_while -> empty .)
    PRINT           reduce using rule 23 (fin_while -> empty .)
    FOR             reduce using rule 23 (fin_while -> empty .)
    DO              reduce using rule 23 (fin_while -> empty .)
    GOSUB           reduce using rule 23 (fin_while -> empty .)
    GOTO            reduce using rule 23 (fin_while -> empty .)
    LABEL_SALTO     reduce using rule 23 (fin_while -> empty .)
    WHILE           reduce using rule 23 (fin_while -> empty .)
    IF              reduce using rule 23 (fin_while -> empty .)
    LET             reduce using rule 23 (fin_while -> empty .)
    END             reduce using rule 23 (fin_while -> empty .)
    RETURN          reduce using rule 23 (fin_while -> empty .)
    LOOP            reduce using rule 23 (fin_while -> empty .)
    ELSE            reduce using rule 23 (fin_while -> empty .)
    NEXT            reduce using rule 23 (fin_while -> empty .)


state 107

    (24) statement -> IF aux_if THEN block ELSE aux_else . block END IF aux_fin
    (12) block -> . statement block
    (13) block -> . empty
    (14) statement -> . INPUT repeated_print
    (15) statement -> . PRINT repeated_print
    (16) statement -> . FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER
    (17) statement -> . DO block LOOP WHILE expression
    (18) statement -> . GOSUB LABEL
    (19) statement -> . GOTO LABEL
    (20) statement -> . LABEL_SALTO
    (21) statement -> . WHILE aux_while DO block LOOP fin_while
    (24) statement -> . IF aux_if THEN block ELSE aux_else block END IF aux_fin
    (28) statement -> . LET IDENTIFIER repeated_size EQUALS expression
    (54) empty -> .

    INPUT           shift and go to state 14
    PRINT           shift and go to state 15
    FOR             shift and go to state 16
    DO              shift and go to state 17
    GOSUB           shift and go to state 19
    GOTO            shift and go to state 20
    LABEL_SALTO     shift and go to state 21
    WHILE           shift and go to state 18
    IF              shift and go to state 22
    LET             shift and go to state 23
    END             reduce using rule 54 (empty -> .)

    block                          shift and go to state 110
    statement                      shift and go to state 12
    empty                          shift and go to state 13

state 108

    (26) aux_else -> empty .

    INPUT           reduce using rule 26 (aux_else -> empty .)
    PRINT           reduce using rule 26 (aux_else -> empty .)
    FOR             reduce using rule 26 (aux_else -> empty .)
    DO              reduce using rule 26 (aux_else -> empty .)
    GOSUB           reduce using rule 26 (aux_else -> empty .)
    GOTO            reduce using rule 26 (aux_else -> empty .)
    LABEL_SALTO     reduce using rule 26 (aux_else -> empty .)
    WHILE           reduce using rule 26 (aux_else -> empty .)
    IF              reduce using rule 26 (aux_else -> empty .)
    LET             reduce using rule 26 (aux_else -> empty .)
    END             reduce using rule 26 (aux_else -> empty .)


state 109

    (16) statement -> FOR IDENTIFIER EQUALS INT TO INT block . NEXT IDENTIFIER

    NEXT            shift and go to state 111


state 110

    (24) statement -> IF aux_if THEN block ELSE aux_else block . END IF aux_fin

    END             shift and go to state 112


state 111

    (16) statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT . IDENTIFIER

    IDENTIFIER      shift and go to state 113


state 112

    (24) statement -> IF aux_if THEN block ELSE aux_else block END . IF aux_fin

    IF              shift and go to state 114


state 113

    (16) statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .

    INPUT           reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    PRINT           reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    FOR             reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    DO              reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    GOSUB           reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    GOTO            reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    LABEL_SALTO     reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    WHILE           reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    IF              reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    LET             reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    END             reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    RETURN          reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    LOOP            reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    ELSE            reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)
    NEXT            reduce using rule 16 (statement -> FOR IDENTIFIER EQUALS INT TO INT block NEXT IDENTIFIER .)


state 114

    (24) statement -> IF aux_if THEN block ELSE aux_else block END IF . aux_fin
    (27) aux_fin -> . empty
    (54) empty -> .

    INPUT           reduce using rule 54 (empty -> .)
    PRINT           reduce using rule 54 (empty -> .)
    FOR             reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    GOSUB           reduce using rule 54 (empty -> .)
    GOTO            reduce using rule 54 (empty -> .)
    LABEL_SALTO     reduce using rule 54 (empty -> .)
    WHILE           reduce using rule 54 (empty -> .)
    IF              reduce using rule 54 (empty -> .)
    LET             reduce using rule 54 (empty -> .)
    END             reduce using rule 54 (empty -> .)
    RETURN          reduce using rule 54 (empty -> .)
    LOOP            reduce using rule 54 (empty -> .)
    ELSE            reduce using rule 54 (empty -> .)
    NEXT            reduce using rule 54 (empty -> .)

    aux_fin                        shift and go to state 115
    empty                          shift and go to state 116

state 115

    (24) statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .

    INPUT           reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    PRINT           reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    FOR             reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    DO              reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    GOSUB           reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    GOTO            reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    LABEL_SALTO     reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    WHILE           reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    IF              reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    LET             reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    END             reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    RETURN          reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    LOOP            reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    ELSE            reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)
    NEXT            reduce using rule 24 (statement -> IF aux_if THEN block ELSE aux_else block END IF aux_fin .)


state 116

    (27) aux_fin -> empty .

    INPUT           reduce using rule 27 (aux_fin -> empty .)
    PRINT           reduce using rule 27 (aux_fin -> empty .)
    FOR             reduce using rule 27 (aux_fin -> empty .)
    DO              reduce using rule 27 (aux_fin -> empty .)
    GOSUB           reduce using rule 27 (aux_fin -> empty .)
    GOTO            reduce using rule 27 (aux_fin -> empty .)
    LABEL_SALTO     reduce using rule 27 (aux_fin -> empty .)
    WHILE           reduce using rule 27 (aux_fin -> empty .)
    IF              reduce using rule 27 (aux_fin -> empty .)
    LET             reduce using rule 27 (aux_fin -> empty .)
    END             reduce using rule 27 (aux_fin -> empty .)
    RETURN          reduce using rule 27 (aux_fin -> empty .)
    LOOP            reduce using rule 27 (aux_fin -> empty .)
    ELSE            reduce using rule 27 (aux_fin -> empty .)
    NEXT            reduce using rule 27 (aux_fin -> empty .)

